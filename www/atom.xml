<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CXH.ME]]></title>
  <link href="http://cxh.me/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2014-06-09T19:33:34+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://cxh.me/2014/06/09/oceanbase-introduction-note/"/>
    <updated>2014-06-09T19:01:00+08:00</updated>
    <id>http://cxh.me/2014/06/09/oceanbase-introduction-note</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常见的防御性编程策略]]></title>
    <link href="http://cxh.me/2014/06/09/defensive-strategy/"/>
    <updated>2014-06-09T11:51:00+08:00</updated>
    <id>http://cxh.me/2014/06/09/defensive-strategy</id>
    <content type="html"><![CDATA[<p>  针对出错之后不能恢复的情况，最好的办法是写另外一个对象，确认成功之后原子的交换对象。同时也能避免对一个对象的修改持锁时间过长。这种思路广泛用在很多地方。</p>

<ol>
<li> 保存备份文件，当前的文件有可能有人在读在写，所以每次线程都写一个单独的备份文件，最后原子的覆盖之前的文件。</li>
<li> 升级系统。自动升级的时候下载了新的可执行文件，然后删除原来的文件，替换成下载文件。当然估计不会有人直接覆盖之前的文件。</li>
<li> 一些NOSQL的冻结。OB里面比较典型的就是UpdateServer的内存冻结，当然是copy on write实现的，最后原子的切换B树的根指针。主要是为了minor fqreeze的时候依然能提供写入服务。</li>
<li> =运算符重载的时候，如果当前类持有的对象先释放了，但是又没能成功复制需要拷贝的对象，就会有悬空的风险。effective c++里面给了一种实现方式，就是先生成一份拷贝，再swap。</li>
</ol>


<p>一个简单的例子如下：</p>

<pre><code>int do_checkpoint()
{
  int ret = OB_SUCCESS;
  if (enable_backup_)
  {
    if (OB_SUCCESS != (ret = write_to_file(tmp_file_path_)))
    {
      TBSYS_LOG(WARN, "failed to write schema backup file:ret[%d]", ret);
    }
    else
    {
      //copy tmp to schema.ini
      unlink(schema_file_path_);
      if (0 == rename(tmp_file_path_, schema_file_path_))
      {
        TBSYS_LOG(INFO, "save schema to backup succ. refresh_times_:%ld", refresh_times_);
      }
      else
      {
        TBSYS_LOG(WARN, "rename new schema file failed:ret[%d]", ret);
        ret = OB_ERR_UNEXPECTED;
      }
    }
  }
  return ret;
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim7.4 && vimgdb编译]]></title>
    <link href="http://cxh.me/2014/06/09/vim7-dot-4-and-vimgdb-compile/"/>
    <updated>2014-06-09T10:52:00+08:00</updated>
    <id>http://cxh.me/2014/06/09/vim7-dot-4-and-vimgdb-compile</id>
    <content type="html"><![CDATA[<p>  首先，你下载的vim7.4代码的一般结构跟常见的工程是不一样的，主要体现在configure不会生成Makefile，make的时候是通过Makefile的配置生成config.h的，也就是说你想的好好的希望如下操作：</p>

<pre><code> ./configure --prefix=$HOME --with-features=huge --enable-multibyte --enable-pythoninterp --enable-cscope --enable-fontset --enable-gdb --enable-largefile \
 --enable-gui=gnome2 \
 --enable-luainterp \
 --enable-tclinterp \
 --with-python-config-dir=/usr/lib/python2.7/config-x86_64-linux-gnu  #编译配置
 --with-lua-prefix=/usr/local/bin/lua

    make &amp;&amp; make install
</code></pre>

<p>  来编译的话，那么实际配置跟上面configure里面是没有关系的。</p>

<p>  以你需要做的是修改Makefile，打开必要的开关，比如安装目录，lua支持什么的</p>

<pre><code># Uncomment the next line to install Vim in your home directory.
prefix = $(HOME)
# LUA
# Uncomment one of these when you want to include the Lua interface.
# First one is for static linking, second one for dynamic loading.
# Use --with-luajit if you want to use LuaJIT instead of Lua.
# Set PATH environment variable to find lua or luajit executable.
CONF_OPT_LUA = --enable-luainterp
#CONF_OPT_LUA = --enable-luainterp=dynamic
#CONF_OPT_LUA = --enable-luainterp --with-luajit
#CONF_OPT_LUA = --enable-luainterp=dynamic --with-luajit
</code></pre>

<p>  其他的操作按如下步骤就行，摘自<a href="https://github.com/larrupingpig/vimgdb-for-vim7.4" title="vimgdb">larrupingpig/vimgdb-for-vim7.4</a>：</p>

<h3>vimgdb install</h3>

<p>  You need:</p>

<p>  vim-7.4.tar.bz2 <a href="http://www.vim.org/sources.php">http://www.vim.org/sources.php</a></p>

<p>  vimgdb-for-vim7.4 (this patch) <a href="https://github.com/larrupingpig/vimgdb-for-vim7.4">https://github.com/larrupingpig/vimgdb-for-vim7.4</a></p>

<p>  Untar all files, apply the patch and make Vim:</p>

<pre><code>tar xjvf vim-7.4.tar.bz2 -C /tmp

tar xzvf vimgdb-for-vim7.4.tar.gz -C /tmp

cd /tmp

patch -p0 &lt; vimgdb-for-vim7.4/vim74.patch

cd vim74/src

make

sudo make install
</code></pre>

<h3>Install vimGdb runtime:</h3>

<p>  Copy the file vimgdb_runtime found in the vimgdb tarball, to your runtime path. To find your runtime path location execute the vim command (this is usually $HOME/.vim): :set runtimepath?</p>

<pre><code>cp -rf /tmp/vimgdb-for-vim7.4/vimgdb_runtime/* ~/.vim
</code></pre>

<p>  Change to the doc directory, start Vim and run the &ldquo;:helptags .&rdquo; command to process the taglist help file. Without this step, you cannot jump to the taglist help topics. You can now use the &ldquo;:help vimgdb&rdquo; command to get the vimGdb documentation.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[总结Oceanbase编码中需要注意的一些细节]]></title>
    <link href="http://cxh.me/2014/06/09/oceanbase-cplusplus-note/"/>
    <updated>2014-06-09T10:38:00+08:00</updated>
    <id>http://cxh.me/2014/06/09/oceanbase-cplusplus-note</id>
    <content type="html"><![CDATA[<ol>
<li><p>所有指针使用之前都需要判断是否为NULL，尤其是如果有IF分支的情况下，如：</p>

<pre><code> if (it != NULL)
 {
     xxx
 }
 else
 {
     it不能再使用了
 }
</code></pre></li>
<li><p>不要使用strcpy而应该使用strncpy。</p></li>
<li><p>所有成员函数都应该考虑是否为const函数.</p></li>
<li><p>所有函数都需要判断传入值是否有效。</p></li>
<li><p>有返回值的函数，需要先定义返回值的默认值，不能直接返回中间结果。比如：</p>

<pre><code> //这样是很容易造成问题的
 int * xxx(xxx)
 {
     int* it = NULL;
     for(int * it =xxx;it != xxx; it ++)
     {}
 }
 //而应该这样
 int * xxx(xxx)
 {
     int* ret = NULL;
     for (int * it = xxx; it != xx; it++)
     {ret = it}
     return ret;
 }
</code></pre></li>
<li><p>所有的错误码都需要向上抛出。错误码不能被隐藏，任何语句执行的前提条件都是之前没有错误。循环尤其需要注意。如：</p>

<pre><code> for (int i = 0; i &lt; xx; i++)
 {
     xxx
 }
 //需要改成
 for (OB_SUCCESS == ret &amp;&amp; int i = 0; i &lt; xx; i++)
 {
     xxx
 }
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用树莓派和DS18B20监控温度变化]]></title>
    <link href="http://cxh.me/2014/05/25/pi-temperature-sensor/"/>
    <updated>2014-05-25T14:16:00+08:00</updated>
    <id>http://cxh.me/2014/05/25/pi-temperature-sensor</id>
    <content type="html"><![CDATA[<p>  基本的教程在这里:</p>

<blockquote><ol>
<li><a href="http://wemaker.cc/60" title="树莓派GPIO引脚详解">引脚定义</a></li>
<li> <a href="http://s.mile77.com/?p=2039" title="树莓派+多个DS18B20+Yeelink，全天候监测多个点的温度">传感器教程1</a></li>
<li> <a href="http://blog.sina.com.cn/s/blog_3cb6a78c0101a46w.html" title="Raspberry Pi 使用DS18B20温度传感器">传感器教程2</a></li>
</ol>
</blockquote>

<p>  鉴于我的硬件水平只限于插板子焊板子和对针脚，其他的都还给数电模电老师了，我还是老老实实买了模块，省的自己焊电阻。
芯片，模块都是淘宝买的，随便搜一家就行，几块钱的东西一般不会有假的。</p>

<p>  整个过程可以按照教程1，2 对应针脚完成，如果顺利基本一次成功。别人的知识产权我就不好摘录了。但是代码我优化了一下，硬件工程师的代码果然是写的异常粗犷。修改后的代码如下：</p>

<pre><code>#!/usr/bin/python
#coding=utf-8
#Filename:temperature.py
import os,datetime,time

def calc_temperature(filename):
    res = 0
    valid_count = 0
    for i in range(0,5):
        with open(filename) as tfile:
            text = tfile.read()
        lines = text.split("\n")
        firstline, secondline = lines[0], lines[1]
        crc = firstline.split(" ")[11]
        if crc == 'YES':
            temperaturedata = secondline.split(" ")[9]
            temperature = float(temperaturedata[2:])
            temperature = temperature / 1000
            valid_count += 1
            res += temperature
            print temperature
        else:
            with open(os.path.expanduser("~/sys.log"), "a") as err:
                err.write("CRC Error: %s\n%s\n" % (datetime.datetime.now().strftime("%Y/%M/%d-%H:%M:%S"), text))
        time.sleep(0.2)
    return res/valid_count if valid_count &gt; 0 else -1

#temperature = calc_temperature("input.txt")
temperature = calc_temperature("/sys/bus/w1/devices/28-000005e31fe6/w1_slave")
if temperature &gt; 0:
    res = '{"value":%f}' %temperature
    with open(os.path.expanduser('~/datafile.txt'), 'w') as output:
        output.write(res)
</code></pre>

<!--more-->


<p>  上传的脚本依然可以用教程里面的。Yeelink居然是一家青岛的公司，感慨省里总算有点互联网的公司了，当然网站做的是挺粗糙的。Yeelink的android手机端一直提示我登录密码出错。重置了也不行。后来发现登陆的时候不是邮箱&hellip;那你网站干嘛又能用邮箱登陆我擦&hellip;.</p>

<p>  温度曲线的图片如下：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2014-5/before.png" title="温度曲线" alt="温度曲线"><p class="align-center">温度曲线</p></p>

<p>  开始的程序没有考虑求平均，不知道会不会有临时跳变的瞬间值。后来加了平均值之后发现多次取的结果是不一样，但是不清楚这个芯片采集的周期是多少。多次平均的结果如下所示：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2014-5/data.png" title="多次平均的结果" alt="多次平均的结果"><p class="align-center">多次平均的结果</p></p>

<p>  ps: 公司周末真热&hellip;.</p>

<h3>参考文献:</h3>

<blockquote><p>[1] 树莓派GPIO引脚详解, <a href="http://wemaker.cc/60">http://wemaker.cc/60</a></p>

<p>[2] 树莓派+多个DS18B20+Yeelink，全天候监测多个点的温度, <a href="http://s.mile77.com/?p=2039">http://s.mile77.com/?p=2039</a></p>

<p>[3] Raspberry Pi 使用DS18B20温度传感器, <a href="http://blog.sina.com.cn/s/blog_3cb6a78c0101a46w.html">http://blog.sina.com.cn/s/blog_3cb6a78c0101a46w.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[OB的Offset和Limit]]></title>
    <link href="http://cxh.me/2014/04/18/offset-and-limit-in-ob/"/>
    <updated>2014-04-18T20:54:00+08:00</updated>
    <id>http://cxh.me/2014/04/18/offset-and-limit-in-ob</id>
    <content type="html"><![CDATA[<p>   数据库的实现里面很重要的两个功能就是Limit和Offset,在web里面，这是分页的基本功能依赖。对于用户来说，一屏不可能显示全部的数据，所以数据请求可以拆散成多个，每次从上次的offset开始读取下一个limit的数据。有些情况下， 我们不需要知道一共有多少数据，只需要循环获取并统计期望的数据和得到的数据，直到两个不匹配。在实际web使用中，这种策略一般不使用，因为预先知道分页数。当然我也真见过这么用的，这nm简直就是无底洞。不知道点到什么时候是个头。</p>

<p>   相应的，正常的策略我们是需要知道数据有多少页的。也就有如下几种策略：</p>

<ol>
<li>. 最烂的实现当然是直接刷出所有数据分页显示其他隐藏。其实数据量如果确实很小的情况下，这样也合理。提高响应速度。</li>
<li>. 发一条count()先统计所有数据，然后计算分页数。 很多分页控件都直接支持count参数，分页会计算offset。</li>
<li>. 数据量非常大的情况下，count()也会造成额外的开销。也就有如下几种方式优化。

<ol>
<li> 单独一张表存储count()，每次有插入数据的时候都同时更新count()，插入过程可以做成存储过程减少网络开销。或者其实我们需要的只是分页数，而每屏显示的数量往往又是固定的，可以直接存分页数。</li>
<li> 有时候自增长ID也可以直接用来做这个。当然问题是不能删数据。</li>
</ol>
</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用来把一个线程的日志输出到单独文件的脚本]]></title>
    <link href="http://cxh.me/2014/02/14/vim-script-to-write-thread-log/"/>
    <updated>2014-02-14T21:32:00+08:00</updated>
    <id>http://cxh.me/2014/02/14/vim-script-to-write-thread-log</id>
    <content type="html"><![CDATA[<p>  很多开源项目的日志都是把多个线程的日志打印到一个文件的，有时候我们需要查看一个线程号下的所有日志，vim选中高亮线程号固然是一种方法，但是看起来不直观，以下脚本完成输出一个线程所有日志到一个文件的功能。</p>

<pre><code>"plugin-写一个线程的log到单独文件
function! ThreadLog()
    let file = readfile(expand("%:p"))
    let pattern = expand('&lt;cword&gt;')
    let matches = []
    for line in file
        let match = matchstr(line, pattern)
        if(!empty(match))
           call add(matches, line)
        endif
    endfor
    let s:filename= pattern . '.log'
    call writefile(matches, s:filename )
endf
nmap &lt;leader&gt;th :call ThreadLog()&lt;cr&gt;
</code></pre>

<p>  使用的时候把光标移动到线程号下面，然后,th就行了。实际上完成的是把所有包含当前单词的行都输出到一个文件的功能。文件名是当前单词。目测够用了。</p>

<p>  好久没写博客了，甚觉我已经离文人很远了。在这个欢乐祥和的日子里，实在是觉得生活充满了顾虑。人生就是这么多矛盾啊，不确定是种状态，确定也是种状态，想想之所以依然这么漂泊着，也就是应了一句话：青春逝去，认输之前。当然了，我觉得我还挺青春的。青春这东西，最重要的不是外表，阳光，积极向上什么的。这都是表面。青春是变革，至少是变革的勇气。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[转载王垠的一段话]]></title>
    <link href="http://cxh.me/2014/01/06/wangyin-words/"/>
    <updated>2014-01-06T21:59:00+08:00</updated>
    <id>http://cxh.me/2014/01/06/wangyin-words</id>
    <content type="html"><![CDATA[<p>  王垠虽然挺扯，这段话还是有道理的：</p>

<p>  我对清华，还有 Princeton，Harvard，MIT，Stanford，Berkeley，CMU 等学校的学生都有了解。这些所谓的“世界一流大学”或者“世界一流大学 wannabee”差不多都是类似的气氛。你冲着它们的名气和“关系网”挤破了头皮进去，然后就每天有人在你耳边对其它人感叹：哇，他好牛啊！发了好多 paper，还得了XX奖。跟参加传销大会似的，让你怀疑这些人还有没有自尊。然后就是填鸭式的教育，无止境的作业和考试，让你感觉他们不是在“教育”你，而是在“筛选”你。这种筛选总是筛掉最差的，但也筛掉最好的。因为最好的学生能意识到你在干什么，他们不给你筛选他们的机会。一旦发现其实没学到东西，中途就辍学出去创业了。所以剩下来的就是最一般的，循规蹈矩听话的。在这样的环境里，你感觉不到真正的智慧和真知的存在。GRE 考试所鼓吹的什么“批判性思维”（critical thinking ）在美国大学里其实是相当缺乏的。学生们只不过是在被培训成为某些其他人的工具，他们具有固定的思维定势，像是一个模子倒出来的。他们不是真正的创造者和开拓者。</p>

<p>  原文出处： <a href="http://www.yinwang.org/blog-cn/2014/01/04/authority/">http://www.yinwang.org/blog-cn/2014/01/04/authority/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking In Java读书笔记]]></title>
    <link href="http://cxh.me/2013/11/24/thinking-in-java-notes/"/>
    <updated>2013-11-24T20:32:00+08:00</updated>
    <id>http://cxh.me/2013/11/24/thinking-in-java-notes</id>
    <content type="html"><![CDATA[<p>  静态成员只有被引用（首次生成所在类的对象或者被首次访问，即使从为生成过那个类的对象）的时候才会初始化。</p>

<p>  一般情况下Java成员变量初始化顺序是，静态成员/静态快->直接初始化的类成员->构造函数</p>

<p>  一个简单的例子如下:</p>

<!-- more -->


<p>  <strong>Cup.java</strong></p>

<pre><code>public class Cup {
    public Cup(int i)
    {
        System.out.println("constructor" + i);
    }
}
</code></pre>

<p>  <strong>TestJava.java</strong></p>

<pre><code>public class TestJava {
    public Cup cup;
    public Cup cup3 = new Cup(3);
    public static Cup cup1 = new Cup(1);
    public static Cup cup2;
    static{
        cup2 = new Cup(2);
    }
    public TestJava(){
        cup = new Cup(0);
    }
    public static void main(String[] args) {
        new TestJava();
    }
}
</code></pre>

<p>  <strong>执行结果是</strong></p>

<pre><code>constructor1
constructor2
constructor3
constructor0
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Effective C++ 读书笔记]]></title>
    <link href="http://cxh.me/2013/11/23/effective-notes/"/>
    <updated>2013-11-23T16:41:00+08:00</updated>
    <id>http://cxh.me/2013/11/23/effective-notes</id>
    <content type="html"><![CDATA[<p>  Effective前面有几节是说构造析构赋值过程中基类和派生类的调用关系的，做了一个综合一点的例子，来验证一下这个问题。代码如下，话说贴代码是在是很没溜的做法，尤其是如果在出版的书中看到的话，这种行为基本属于骗稿费的&hellip;</p>

<!-- more -->


<p>  <strong>object.h</strong></p>

<pre><code>#ifndef OCEANBASE_OBJECT_H_
#define OCEANBASE_OBJECT_H_

#include "base_object.h"
class Object: public BaseObject
{
  public:
    Object ();
    Object (int magic);
    Object (const Object &amp; obj);
    virtual ~Object ();
    virtual void print_info();
    Object&amp; operator= (const Object&amp; obj);
    const int &amp; get_magic() const;
    const int &amp; get_magic();
  private:
    /* data */
    int magic_;
};

#endif //OCEANBASE_OBJECT_H_
</code></pre>

<p>  <strong>object.cpp</strong></p>

<pre><code>#include &lt;stdio.h&gt;
#include "object.h"

Object::Object():magic_(0)
{
  printf("construct in derived \n");
}

Object::Object (int magic):magic_(magic), BaseObject(magic)
{
  printf("construct in derived with magic\n");
}

Object::Object (const Object &amp; obj)
  : BaseObject(obj)
{
  printf("copy construct in derived\n");
  magic_ = obj.magic_;
}

Object::~Object()
{
  printf("destructor in derived\n");
}

const int &amp; Object::get_magic() const
{
  printf("const\n");
  return magic_;
}

const int &amp; Object::get_magic()
{
  printf("non const\n");
  return magic_;
}

Object&amp; Object::operator= (const Object&amp; obj)
{
  printf("operator = in derived\n");
  //BaseObject::operator =(obj);
  magic_ = obj.magic_;
}

void Object::print_info()
{
  BaseObject::print_info();
  printf("derived:magic_%d\n", magic_);
}
</code></pre>

<p>  <strong>base_object.h</strong></p>

<pre><code>#ifndef OCEANBASE_BASE_OBJECT_H_
#define OCEANBASE_BASE_OBJECT_H_
class BaseObject
{
  public:
    BaseObject ();
    BaseObject (int base_magic);
    BaseObject (const BaseObject &amp;obj);
    virtual ~BaseObject ();
    //BaseObject &amp; operator= (const BaseObject &amp; obj);
    virtual void print_info();
  private:
    /* data */
    int base_magic_;
};

#endif //OCEANBASE_BASE_OBJECT_H_
</code></pre>

<p>  <strong>base_object.cpp</strong></p>

<pre><code>#include &lt;stdio.h&gt;
#include "base_object.h"
BaseObject::BaseObject():base_magic_(0)
{
  printf("construct in base\n");
}

BaseObject::BaseObject(int base_magic):base_magic_(base_magic)
{
  printf("construct in base with magic\n");
}

BaseObject::BaseObject (const BaseObject &amp;obj)
{
  printf("copy construct in base\n");
  base_magic_ = obj.base_magic_;
}

BaseObject::~BaseObject()
{
  printf("destructor in base\n");
}

//BaseObject &amp; BaseObject::operator= (const BaseObject &amp; obj)
//{
  //printf("operator = in base\n");
  //base_magic_ =  obj.base_magic_;
//}

void BaseObject::print_info()
{
  printf("base_object: base_magic_%d\n", base_magic_);
}
</code></pre>

<p>  <strong>main.cpp</strong></p>

<pre><code>#include &lt;stdio.h&gt;
#include "object.h"
int main(int argc, const char *argv[])
{
  printf("\n");
  printf("obj1\n");
  Object obj1(1);

  printf("\n");
  printf("obj2\n");
  Object obj2(2);

  printf("\n");
  obj2=obj1;

  printf("\n");
  printf("obj1.print_info()\n");
  obj1.print_info();

  printf("\n");
  printf("obj2.print_info()\n");
  obj2.print_info();

  printf("\n");
  return 0;
}
</code></pre>

<p>  <strong>Makefile</strong></p>

<pre><code>objects= main.o object.o base_object.o
outfile= out
flag= -g
cc= g++

$(outfile):$(objects)
    $(cc) $(flag) -o $(outfile) $(objects)

object.o:object.h
base_object.o:base_object.h
main.o:object.h base_object.h


.PHONY:clean
clean:
    -rm -f $(outfile) $(objects)
</code></pre>

<p>执行结果是：</p>

<pre><code>obj1
construct in base with magic
construct in derived with magic

obj2
construct in base with magic
construct in derived with magic

operator = in derived

obj1.print_info()
base_object: base_magic_1
derived:magic_1

obj2.print_info()
base_object: base_magic_2
derived:magic_1

destructor in derived
destructor in base
destructor in derived
destructor in base
</code></pre>

<p>  可以自行调整并执行，主要说明几个问题而已：</p>

<ol>
<li> Object c2=c1;这种会被编译器优化成拷贝构造，中间不会有=运算符的调用。</li>
<li> 没有显式声明的时候编译器为类生成默认构造函数，没有显示指明的情况下派生类构造函数自动调用基类的默认构造函数，如果基类有需要初始化的一定要手动声明并调用带参构造函数。</li>
<li> 没有显式声明的时候编译器为类生成默认拷贝构造函数，没有指明的情况下拷贝构造的时候派生类不会调用基类的拷贝构造，只会调用基类的默认构造函数来内部的基类对象，所以需要自己调用基类的拷贝构造。</li>
<li> 编译器不会为=运算符自动生成重载，=运算符也不调用基类的=运算符重载，所以需要自己声明并调用，这也是书中强调的。</li>
<li> 没有=运算符重载的情况下遇到=操作，拷贝对象每个字段。</li>
</ol>


<p>  总结一下如下表：</p>

<p>   <table>
<caption>表1 总结下对象生成类的函数的编译器行为</caption>
<thead>
<tr class="header">
<th align="center">函数</th>
<th align="center">没有声明的情况下是否自动生成</th>
<th align="center">是否默认调用基类的对应函数</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td align="center">构造函数</td>
<td align="center">是</td>
<td align="center">是</td>
</tr>
<tr class="even">
<td align="center">拷贝构造</td>
<td align="center">是</td>
<td align="center">否,调用基类默认构造函数构造基类对象</td>
</tr>
<tr class="odd">
<td align="center">等号运算符重载</td>
<td align="center">否</td>
<td align="center">否</td>
</tr>
</tbody>
</table></p>

<p>  注：虽然应该是c++标准，但是还是限制一下编译器版本吧，在gcc4.4.6下验证通过（ob的编译器版本）</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式调试系列之行为模拟]]></title>
    <link href="http://cxh.me/2013/11/21/use-mock-to-debug/"/>
    <updated>2013-11-21T17:31:00+08:00</updated>
    <id>http://cxh.me/2013/11/21/use-mock-to-debug</id>
    <content type="html"><![CDATA[<p>  最近调试分布式系统，感觉实际上什么看日志的方式都不如带集群调试，当然有些行为是比较难以模拟的，可能的情况下，要么重现环境，要么对部分模块做mock。单测带来的便利性是远超过不做mock省下的时间的，比如与sql相关的逻辑完全可以启动一个完整的sql环境，然后把请求发过去，看回来的响应。至于其他的部分，基本的原则是减少变量。比如两个server之间的通信，同时检测两个server只能看日志，所以最好能mock一个server的行为，这样减少调试的不确定性。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于ob代码规范里面的行末空格]]></title>
    <link href="http://cxh.me/2013/11/20/method-to-deal-with-blanks-at-line-end/"/>
    <updated>2013-11-20T10:50:00+08:00</updated>
    <id>http://cxh.me/2013/11/20/method-to-deal-with-blanks-at-line-end</id>
    <content type="html"><![CDATA[<p>  行尾的空格在post-review的时候会被标识成红色，其实可以通过如下vim配置直接显示出来并全部去掉：</p>

<pre><code>" 删除所有行未尾空格
nnoremap &lt;C-f12&gt; :%s/[ \t\r]\+$//g&lt;cr&gt;''
"显示空格
highlight ExtraWhitespace ctermbg=red guibg=red
match ExtraWhitespace /\s\+$/
augroup ExtraWhitespaceGroup
    autocmd!
    autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
    autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@&lt;!$/
    autocmd InsertLeave * match ExtraWhitespace /\s\+$/
    autocmd BufWinLeave * call clearmatches()
augroup END
</code></pre>

<p>  这样打开所有文件（其实可以只处理cpp)的时候行尾空格都会变成红色，&lt;Ctrl-F12>可以统一去掉所有的空格。这么做唯一不爽的是如果有未遵从代码规范的文件那么就满篇的红色。比如多隆大神早期的代码&hellip;.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于得到当前执行文件所在的目录]]></title>
    <link href="http://cxh.me/2013/11/19/method-to-get-absolute-path-of-current-program/"/>
    <updated>2013-11-19T21:47:00+08:00</updated>
    <id>http://cxh.me/2013/11/19/method-to-get-absolute-path-of-current-program</id>
    <content type="html"><![CDATA[<p>  今天遇到一个问题，程序里面用相对路径引用了同一级目录下的一个文件，shell在上一级目录调用程序的时候，发现当前目录变成了上一级目录，于是程序在上一级目录找那个文件。最简单的办法当然是shell脚本里面加cd操作，但是暂时不方便修改脚本。所以直接通过程序获取绝对路径好了。</p>

<p>  首先，直接 realpath(&ldquo;./&rdquo;) 和 getcwd 获取的都是当前路径，也就是当前shell所在的路径。<strong>FILE</strong>获取的是文件名，不包含路径，而且是编译过程确定的，最简单的办法当然是argv[0]，但是在test_case(gtest)里面不方便传来传去，后来发现最好的办法是这样的：</p>

<pre><code>#include "libgen.h"
#define MAX_PATH_SIZE 100
char current_absolute_path[MAX_PATH_SIZE] = {'\0'};
if (readlink("/proc/self/exe", current_absolute_path, MAX_PATH_SIZE - 1) &lt; 0)
{
  //error
}
else
{
  sprintf(current_absolute_path, "%s/%s", dirname(current_absolute_path), schema_file_name);
}
</code></pre>

<p>  这样就可以拼合当前程序所在目录和schema_file_name得到这个文件的绝对路径了。这里/proc/self/exe是运行时的当前执行程序软链接。看来proc目录下要好好研究一下啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式调试之导入import文件]]></title>
    <link href="http://cxh.me/2013/11/19/vim-script-to-find-import-file/"/>
    <updated>2013-11-19T17:41:00+08:00</updated>
    <id>http://cxh.me/2013/11/19/vim-script-to-find-import-file</id>
    <content type="html"><![CDATA[<p>  最近看元启师兄写了一个脚本更新所有重构之后的include引用，我暂时没有需要如此伤筋动骨的代码，所以暂时用不上。但是有时候引用一个类要去找所在的文件，而有时候经常会记错地方。写了一个简单的vim插件依赖ctags来找对象或函数所在的位置。代码如下：</p>

<!-- more -->


<pre><code>if !exists('g:base_dir_mark')
    "set base_dir_mark to indicate where to generate post-review.sh
    let g:base_dir_mark = 'tags'
endif

if !exists('g:strip_prefix_arr')
    "set base_dir_mark to indicate where to generate post-review.sh
    let g:strip_prefix_arr = ['rootserver', 'root_table']
endif

if !exists('g:import_token')
    "set base_dir_mark to indicate where to generate post-review.sh
    let g:import_token = 'import "%s"'
endif

function! GetImportFile()
    let filepath = expand("%:p")
    let base_dir = GetBaseDirectory() . 'src/'
    let idx = stridx(filepath, base_dir)
    if idx == 0
        let import_file_name = strpart(filepath, len(base_dir))
        let import_cmd = substitute(g:import_token, '%s', import_file_name, 'g')
        for prefix in g:strip_prefix_arr
            let import_cmd = substitute(import_cmd, prefix.'/', '', 'g')
        endfor
        let @" = import_cmd
        echo import_cmd
    endif
endf

function! GetBaseDirectory()
    let max = 5
    let dir = getcwd()
    let i = 0
    while isdirectory(dir) &amp;&amp; i &lt; max
        if filereadable(dir .'/'. g:base_dir_mark)
            return dir.'/'
        endif
        let idx = strridx(dir, '/')
        let dir = dir[:idx-1]
        let i = i + 1
    endwhile
    return ''
endf
</code></pre>

<p>  前提是配置好你的ctags，然后在系统根目录下用</p>

<pre><code>ctags -R * //其他语言
ctags -R  -c++-kinds=+p --fields=+iaS --extra=+q . //c++
</code></pre>

<p>  生成tags，插件会去去找tags文件，然后把找到的位置定义为项目目录，之后的引用路径会按照这路径来生成相对路径。strip_prefix_arr制定要去掉的前缀，比如我们的路径是/home/dev/src/rootserver/xxx.h，tags生成在dev下，按照base_dir_mark/src去掉项目路径得到 rootserver/xxx.h，根据strip_prefix_arr去掉rootserver，最后得到import &ldquo;xxx.h&#8221;。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式调试系列：关于日志的比对]]></title>
    <link href="http://cxh.me/2013/11/17/method-to-diff-log/"/>
    <updated>2013-11-17T22:00:00+08:00</updated>
    <id>http://cxh.me/2013/11/17/method-to-diff-log</id>
    <content type="html"><![CDATA[<p>  有时候我们其实会遇到这种情况，本地修改了一点东西，然后发现跑跟预期结果不一致，这时候去看日志发现各种日志里面有各种ERROR，但是这些ERROR实际上并不是这个问题导致的，因为你回滚修改之后发现这些ERROR依然存在。如果有core文件当然最好，但是如果没有或者core里面并看不出问题就比较纠结了。前面一篇文章我们探讨了如何<a href="http://qianjigui.iteye.com/blog/368449" title="Vim日志定位解决方案">写个插件通过log来定位源码行</a>，这篇日志我们讨论一下如何快速定位自己的错误日志。</p>

<p>  首先，前面的状况至少可以保证一点，你check一份新的代码或者回滚本地修改然后运行，得到的错误日志和你当前的错误日志是可比较的。也就是说，你的错误至少不会导致错误日志之中有巨大的变化。这样的话我们可以采取如下的策略比较错误日志。</p>

<ol>
<li> 得到当前的错误日志，假使命名为log.core</li>
<li> check一份新的代码或者回滚本地修改，得到之前的错误日志，假使命名为log.ok</li>
<li> 比较log.ok和log.core，分析日志的差别，得到本地修改导致的真实错误日志。</li>
</ol>


<p>  想法是很简单的，唯一的问题是OB日志里面是有时间戳的，这就导致没一行都有差异，那就太纠结了。我们可以用如下vim命令来去掉所有的时间戳。vim正则的转义规则见<a href="http://qianjigui.iteye.com/blog/368449" title="Vim 中的正则表达式">参考文献</a>。</p>

<pre><code>map :lg :%s/\(^\[.\{-}\]\)\\|\(\[\d\+\]\)\\|\(0x\w\+\)//g
</code></pre>

<p>  这里面唯一的风险是比如我们在中括号里面写的数字也会被剔除，好在我们只是比较日志差异，想要看原始日志大不了根据行号到完整版里面找去，而且这个概率不大。</p>

<p>  <!-- more --></p>

<p>  实际的效果是这样的。<s>我在考虑要不要把所有的tsi错误都去掉。</s> tsi的错误可以直接剔除0x\w+这些16进制数。</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2013-11/logdiff.png" title="日志比较" alt="日志比较"><p class="align-center">日志比较</p></p>

<h3>参考文献:</h3>

<blockquote><p>[1] Vim 中的正则表达式, <a href="http://qianjigui.iteye.com/blog/368449">http://qianjigui.iteye.com/blog/368449</a></p>

<p>[2] Vim日志定位解决方案, <a href="http://cxh.me/2013/11/08/solution-to-locate-log-in-src/">http://cxh.me/2013/11/08/solution-to-locate-log-in-src/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式调试之vim日志定位解决方案]]></title>
    <link href="http://cxh.me/2013/11/08/solution-to-locate-log-in-src/"/>
    <updated>2013-11-08T21:31:00+08:00</updated>
    <id>http://cxh.me/2013/11/08/solution-to-locate-log-in-src</id>
    <content type="html"><![CDATA[<p>  做分布式系统看日志解决问题是基本功了，毕竟多个server跑在不同的机器上，即使用gdb能attach到某个进程上，或者<a href="http://cxh.me/2013/10/29/use-gdb-to-test-multi-servers-in-ob/" title="用gdb调试分布式系统（OB中的应用）">用非daemon模式启动并调试</a>但是case往往很复杂，难以用测试环境完全模拟case，所以大部分情况下还是需要看日志解决问题的。</p>

<p>  不过日志多了之后往往容易跟丢，在浩如烟海的日志里面定位到发生错误的地方也不是见容易的事情。这周大部分时间就费在这上面了（不过还是不熟）。期间写了一个简单的vim插件实现日志的定位。想法如下：</p>

<!-- more -->


<p>  偶然发现通过deploy.py ob1.rs0.less打开less窗口之后按v键可以转到vim窗口，这就解决很多问题了，毕竟我可不想在less下实现什么功能。vim script就熟悉多了。</p>

<p>  ob的log格式是这样的</p>

<pre><code>[2013-11-08 20:02:23.698586] WARN  get_schema (ob_root_schema_service.cpp:296) [139800896067328] local schema not inited 
</code></pre>

<p>  可以看出关键的地方是打印日志的文件和行数，所以我们用正则\w+.c(pp)*:\d+（vim里需要转义）来匹配日志行，得到所在文件和行数之后用执行ssh命令去开发机的项目下find对应的文件，把找到的结果写入某个特定文件（~/.session)里面，之后写一个插件根据文件中的记录打开对应的文件并标红对应的行即可。</p>

<p>  定位log的vim脚本实现如下：</p>

<pre><code>if !exists('g:project_base_dir')
    let g:project_base_dir = '$HOME/dev $HOME/src'
endif

if !exists('g:user_name')
    let g:user_name = 'xxxx'
endif

if !exists('g:server_ip')
    let g:server_ip = 'xx.xx.xx.xx'
endif

function! LogSession() range
    let filearr = []
    for linenum in range(a:firstline, a:lastline)
        let curr_line = getline(linenum)
        let pos_str = matchstr(curr_line,'\(\w\+\)\.c\(pp\)*:\(\d\+\)')
        let pos_arr = split(pos_str, ":")
        if !empty(pos_arr)
            let filename = pos_arr[0]
            let linenum = pos_arr[1]
            if index(filearr, filename) == -1
                "generate file list
                let session_cmd = "find ". g:project_base_dir ." -name ". filename .' -exec echo "{}"":'.linenum.'" &gt;&gt;~/.session \;'
                let ssh_cmd = "!ssh ".g:user_name.'@'.g:server_ip." \'".session_cmd."\'"
                echo ssh_cmd
                execute ssh_cmd
                execute ':call Vm_toggle_sign()'
                call add(filearr, filename)
            endif
        endif
    endfor
endfunction
</code></pre>

<p>  解释几点</p>

<ul>
<li>g:project_base_dir定义源码所在目录，如果源码引用了其他的库，最好把其他库的源码目录一并指定。</li>
<li>g:user_name 开发机用户名，这是你源码所在机器的用户名</li>
<li>g:server_ip 开发机IP，这是你的源码所在机器的IP，保证能够无密码登录。</li>
</ul>


<p>  这样在测试机看log的less窗口里面按v进入vim（vim脚本需要部署到开发机和测试机各一份），然后在对应的行（或者多行）执行LogSession，对应的文件位置信息就被写入开发机的~/.session文件里面（这个应该可以配置，忘了做了）。</p>

<p>  另开一个窗口ssh到开发及，打开.session，应该类似于如下：</p>

<pre><code>/home/xxx.xx/dev/src/rootserver/ob_root_server.cpp:584
/home/xxx.xx/dev/src/rootserver/ob_root_server.cpp:2183
/home/xxx.xx/dev/src/rootserver/ob_root_inner_table_task.cpp:175
</code></pre>

<p>  定位到某一行调用插件打开代码就行，这就涉及到[前文所说的插件了][2]。按照快捷键打开对应的行就行。</p>

<p>  之后在vimrc里面映射键就行了</p>

<pre><code>map &lt;leader&gt;ss :call LogSession()&lt;cr&gt;
nnoremap &lt;leader&gt;co :call OpenFileWithDefApp()&lt;cr&gt;
let g:applist={
        \'pdf':'evince',
        \'png,gif,jpg':'eog',
        \'rmvb,mkv,flv,avi,mp4,m4v':'mplayer',
        \'rar':'!unrar l %',
        \'epub':'!calibre %',
        \'zip':'!unzip -O CP936 -l %',
        \'pwd':'nautilus',
        \'docx,xlsx,pptx,ppt':'libreoffice',
        \'default':':e %'
        \}
</code></pre>

<p>  截图如下：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2013-11/three-log.png" title="log文件" alt="log文件"><p class="align-center">log文件</p></p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2013-11/one-line.png" title="定位到对应的源码行c" alt="定位到对应的源码行"><p class="align-center">定位到对应的源码行</p></p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2013-11/two-line.png" title="定位到对应的源码行cpp" alt="定位到对应的源码行"><p class="align-center">定位到对应的源码行</p></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[自己写的一个根据路径打开文件的插件]]></title>
    <link href="http://cxh.me/2013/11/08/a-vim-plugin-to-deal-with-file-list/"/>
    <updated>2013-11-08T21:26:00+08:00</updated>
    <id>http://cxh.me/2013/11/08/a-vim-plugin-to-deal-with-file-list</id>
    <content type="html"><![CDATA[<p>这个其实修改了很多次，最初的目的是在linux下嘛，找电影不方便，只能用locate打印出一个电影列表来，但是每次复制路径到命令行多不方便啊，最好能在vim里面操作，于是想想干脆做成通用的好了，就有了这个filelist.vim</p>

<!-- more -->


<pre><code>"=============================================================================
"     FileName: filelist.vim
"         Desc:
"       Author: ChenXiaohui
"        Email: sdqxcxh@gmail.com
"     HomePage: http://www.cxh.me
"      Version: 0.0.1
"   LastChange: 2013-11-06 20:31:23
"      History:
"=============================================================================
function! GetCmd(type,line)
    let cmd=get(g:applist,a:type)
    if empty(cmd)
        let cmd=get(g:applist,'default')
    endif
    "no %
    if cmd[0] != '!' &amp;&amp; cmd[0] != ':'
        let cmd='!nohup '.cmd.' '.Trans(a:line).' &gt;/dev/null 2&gt;&amp;1 &amp;'
    else
        let cmd=substitute(cmd,'%',Trans(Trans(a:line)),'g')
    endif

    "let cmd=substitute(cmd,'%&lt;',a:line,'g')
    return cmd
endfunction

function! OpenFileWithDefApp()
    let cmd=''
    let origin_line = Trim(Trim(getline("."),'\\'), ' ')

    let idx = stridx(origin_line,':')
    echo idx
    if idx &gt; -1
        let line = strpart(origin_line, 0, idx)
        let linenum = strpart(origin_line, idx)
    else
        let line = origin_line
    endif

    if !filereadable(line)
        "Directory
        let cmd=GetCmd('pwd',line)
    else
        let idx=strridx(line,".")
        "has no ext
        if idx==-1
            let cmd=GetCmd('default',line)
        else
            let fileExt = tolower(matchstr(line,'\.\w\+'))
            let fileExt=tolower(strpart(fileExt,1))
            for [exts,app] in items(g:applist)
                let supportExt=split(exts,',')
                if index(supportExt,fileExt)&gt;=0
                    let cmd=GetCmd(exts,line)
                endif
            endfor
        endif
    endif

    if empty(cmd)
        let cmd=GetCmd('default',line)
    endif
    execute cmd
    if exists('linenum')
        execute linenum
        execute ':call Vm_toggle_sign()'
        "execute ':set cursorline'
        "normal V
    endif
endf

function! DelFile ()
    let line=getline(".")
    if !filereadable(line)
        "echo "!rm -ri ".Trans(getline("."))
        :execute "!rm -ri ".Trans(getline("."))
    else
        "echo "!rm -i ".Trans(getline("."))
        :execute "!rm -i ".Trans(getline("."))
    endif
    :del
endf

function! CopyFile()
    let cmd=''
    let line=getline(".")

    if !filereadable(line)
        "Directory
        let cmd='!cp -a'.Trans(line).' '.Trans(g:dst_dir)
    else
        let cmd='!cp '.Trans(line).' '.Trans(g:dst_dir)
    endif
    :execute cmd
endf

function! ChDir()
    let cmd=''
    let line=getline(".")

    if !filereadable(line)
        "Directory
        let cmd=':cd '.Trans(line)
    else
        let cmd=':cd '.Trans(DirName(line))
    endif
    :execute cmd
    ":echo cmd
    :sh
endf

function! DirName(line)
    let idx=strridx(a:line,'/')
    return strpart(a:line,0,idx)
endf

function! Trans(line)
    let line=Trim(a:line, ' ')
    let line=substitute(line,"'","\\\\'","g")
    let line=substitute(line,' ','\\ ','g')
    let line=substitute(line,'!','\\!','g')
    let line=substitute(line,'#','\\#','g')
    let line=substitute(line,'&amp;','\\&amp;','g')
    let line=substitute(line,'(','\\(','g')
    let line=substitute(line,')','\\)','g')
    return line
    "return "'".line."'"
    "return "'".substitute(a:line,"'","'\\\\''","g")."'"
endf
</code></pre>

<p>  原理还是很简单的，分析当前行，得到文件路径，根据类型找到关联命令，然后替换关联命令得到最后的shell命令并执行。就是一堆转义比较罗嗦，在vimrc里面定义关联程序信息：</p>

<pre><code>" plugin- deal with filelist
nnoremap &lt;leader&gt;co :call OpenFileWithDefApp()&lt;cr&gt;
nnoremap &lt;leader&gt;rm :call DelFile()&lt;cr&gt;
nnoremap &lt;leader&gt;cd :call ChDir()&lt;cr&gt;
nnoremap &lt;leader&gt;to :call CopyFile()&lt;cr&gt;
let g:dst_dir="/media/cxh/MY MP3/"
let g:applist={
            \'pdf':'evince',
            \'png,gif,jpg':'eog',
            \'rmvb,mkv,flv,avi,mp4,m4v':'mplayer',
            \'rar':'!unrar l %',
            \'epub':'!calibre %',
            \'zip':'!unzip -O CP936 -l %',
            \'pwd':'nautilus',
            \'docx,xlsx,pptx,ppt':'libreoffice',
            \'default':':e %'
            \}
</code></pre>

<p>  需要特别说明的是：</p>

<ol>
<li> 几个函数的作用分别是调用执行程序打开当前文件，删除，到当前文件所在路径下，和copy当前文件到制定的dst_dir（这个我主要用在替代windows下的发动到移动存储介质用了）</li>
<li> applist是类型-程序关联数组，说明一下，%会被替换成当前行所指定的文件路径。如果applist里面的命令既不是!开头（shell执行）也不是:开头（vim内部命令），就会被转换成类似于：!nohup mplayer /media/xx.rmvb >/dev/null 2>&amp;1 &amp;的命令，相当于windows的调用默认程序打开。</li>
<li> 支持这种形式的行号调用 xxx.cpp:123 默认用:e 打开之后会定位到对应行，然后标红，标红使用三种方式：<strong>visualmark</strong>, <strong>cursorline</strong>和<strong>normal V</strong>，第一种需要<a href="http://www.vim.org/scripts/script.php?script_id=1026" title="Visual Mark : Visual mark, similar to UltraEdit's bookmark">安装插件</a></li>
</ol>


<p>  钦此。</p>

<h3>参考文献:</h3>

<blockquote><p>[1] Visual Mark : Visual mark, similar to UltraEdit&rsquo;s bookmark, <a href="http://www.vim.org/scripts/script.php?script_id=1026">http://www.vim.org/scripts/script.php?script_id=1026</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何构建按高可用系统（分享的笔记）]]></title>
    <link href="http://cxh.me/2013/11/01/how-to-build-high-available-system/"/>
    <updated>2013-11-01T18:42:00+08:00</updated>
    <id>http://cxh.me/2013/11/01/how-to-build-high-available-system</id>
    <content type="html"><![CDATA[<p>版权所有：<a href="">解伦师兄</a></p>

<h3>介绍篇</h3>

<p><strong>可用性vs可靠性</strong></p>

<p>  可用性主要是从时间的角度看，可靠的时间。可靠性主要是看不可用的频率。如果一个系统1小时宕机1ms，可用性非常高，可靠性非常低。</p>

<p>  可用性可靠性是系统的工程，设计开发，管理，运维等等。</p>

<p>  宕机几大因素：软件-硬件-网络-人为</p>

<p>  data loss的最大因素：drop table, 所以要做好充分的容错。</p>

<!-- more -->


<h3>设计篇</h3>

<p><strong>减少故障发生的可能</strong></p>

<p>  避免单点故障，防止扩散，有效的监控运维配合</p>

<p>  常见的<strong>冗余</strong>设计。</p>

<blockquote><ul>
<li>RAID,Replica,Erasure Code</li>
<li>BackUp, Reassign,Retry</li>
<li>Master-Slave,Mirror,RAC..</li>
</ul>
</blockquote>

<p>  减少对外部系统强依赖</p>

<blockquote><ul>
<li>缓存</li>
<li>异步替代同步</li>
</ul>
</blockquote>

<p>  对外部依赖不信任</p>

<blockquote><ul>
<li>结果进行</li>
<li>失败情况下failover（重试时间次数需要控制）</li>
</ul>
</blockquote>

<p>  有效的内部监控</p>

<p><strong>减少故障恢复时间</strong></p>

<p>  无状态最好</p>

<blockquote><ul>
<li>有状态定期做持久化（checkpoint/commitlog)</li>
</ul>
</blockquote>

<p>  有效的故障隔离</p>

<blockquote><ul>
<li>故障检测，黑白名单，流量分配</li>
<li>黑名单要有恢复机制</li>
</ul>
</blockquote>

<p><strong>减少损失</strong></p>

<p>  过载保护</p>

<blockquote><ul>
<li>发现故障，并限制资源</li>
</ul>
</blockquote>

<p>  应用降级</p>

<blockquote><ul>
<li>关闭部分不重要的功能(某些情况下用户也感觉不出来)</li>
</ul>
</blockquote>

<p>  有个故事：二战的时候（好背景），坦克设计的时候每次发射炮弹，都会有电磁波导致所有软件挂掉，所以故障恢复就很重要。</p>

<h3>案例篇</h3>

<p><strong>Twitter</strong></p>

<p>  世界杯的时候twitter经常会时常挂掉</p>

<blockquote><ul>
<li>memcache规划的问题</li>
<li>cache也要注意设计</li>
</ul>
</blockquote>

<p><strong>Foursquare</strong></p>

<p>  数据不均，mongodb数据量超过内存之后性能非常差(mmap的问题)</p>

<blockquote><ul>
<li>数据迁走之后有空洞，页不释放</li>
<li>还好毕设的时候数据量不大</li>
</ul>
</blockquote>

<p><strong>Amazon</strong></p>

<p>  EBS主网络走数据，备网络走控制，操作失误，主网络切到备网络</p>

<blockquote><ul>
<li>相应超时，认为丢失副本</li>
<li>副本复制，继续加剧网络问题</li>
</ul>
</blockquote>

<p><strong>Weibo</strong></p>

<p>  热点存在，cache失效，一瞬间所有访问db</p>

<blockquote><ul>
<li>加锁，一个人获取内容回填cache之后就不会有人去访问db了</li>
</ul>
</blockquote>

<p><strong>Facebook</strong></p>

<p>  cache没取到就删除了原cache</p>

<p><strong>OB</strong></p>

<p>  客户端要做分流，业务高峰，超时严重，把cluster都加入黑名单，重试风暴</p>

<h3>总结篇</h3>

<p><strong>可用性</strong></p>

<blockquote><ul>
<li>BASE:基本可用</li>
<li>CAP:No CAP, No CP, A是很重要的</li>
<li><a href="">20 Key High Availability Design Principles</a></li>
</ul>
</blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[分布式调试之用gdb调试分布式系统]]></title>
    <link href="http://cxh.me/2013/10/29/use-gdb-to-test-multi-servers-in-ob/"/>
    <updated>2013-10-29T13:40:00+08:00</updated>
    <id>http://cxh.me/2013/10/29/use-gdb-to-test-multi-servers-in-ob</id>
    <content type="html"><![CDATA[<p>  分布式系统开发的时候我们最经常遇到的问题就是，从一个server发送了一条报文之后怎么在另一个server查看这条报文的处理逻辑是否正确，单机的debug都不是问题，但是多机debug怎么做呢？</p>

<p>  在ob团队里面，正常情况下我们有如下三种方式处理这些问题：</p>

<ol>
<li> 做mock，写单测，隔离开集群环境</li>
<li> 加调试日志，部署集群环境，看日志。</li>
<li> 非daemon模式下通过gdb调试。</li>
</ol>


<p>  这里我们详细说一下第三种。这也是最有效果的一种。</p>

<!-- more -->


<p>  需要强调的是，正常情况下ob启动之后各个server会以守护进程方式运行，这时候如果用gdb启动server的话，gdb不知道在fork之后跟哪个进程，而在我测试下，<a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gdbmp/" title="使用 GDB 调试多进程程序">set follow-fork-mode</a>貌似也没成功过。</p>

<p>  所以最好的方法是直接不要通过守护进程启动，我们在部署ob到home目录下，集群名用ob1，.gdbinit里面写入：</p>

<pre><code>cd ~/ob1
file bin/rootserver
set args -r 10.235.162.8:3500 -R 10.235.162.8:3500 -i eth0 -C 1 -N
break "/home/xiaohui.cpc/roottable_dev/src/rootserver/ob_root_worker.cpp:2053"
break "/home/xiaohui.cpc/roottable_dev/src/rootserver/ob_root_worker.cpp:941"
</code></pre>

<p>  参数里面加-N表示不以daemon方式启动。</p>

<p>  这样通过gdb可以启动rootserver，然后同样启动其他需要的server，就可以调试在gdb里面看到程序执行后停在断点的位置。启动脚本如下，这里我们只启动了chunkserver。</p>

<pre><code>#!/bin/bash
rs_ip=10.235.162.8
rs_port=3500
cs_port=3501
ups_port=3502
ms_port=3503
freeze_port=3504
mysql_port=3505
net=bond0
appname=ob1.xiaohui.cpc
no_daemon=-N

#bin/rootserver -r $rs_ip:$rs_port -R $rs_ip:$rs_port -i $net -C 1 $no_daemon
bin/chunkserver -r $rs_ip:$rs_port -p $cs_port -n $appname -i $net $no_daemon

#bin/updateserver -r $rs_ip:$rs_port -p $ups_port -m $freeze_port -i $net $no_daemon
#bin/mergeserver -r $rs_ip:$rs_port -p $ms_port -z $mysql_port -i $net $no_daemon

#bin/rs_admin -r $rs_ip -p $rs_port set_obi_role -o OBI_MASTER
#bin/rs_admin -r $rs_ip -p $rs_port -t 60000000 boot_strap $no
</code></pre>

<p>  断点命中的情况如图1所示：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2013-10/gdb_multi_server.png" title="图1：断点命中的情况" alt="图1：断点命中的情况"><p class="align-center">图1：断点命中的情况</p></p>

<p>  唯一的问题是gdb有时候会退出，如图2。感觉上是rpc超时了？</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2013-10/gdb_quit.png" title="图2：gdb退出" alt="图2：gdb退出"><p class="align-center">图2：gdb退出</p></p>

<p>  感谢玩大数据的<a href="http://weibo.com/hanfooo" title="韩富晟 支付宝颜然，玩大数据的，OceanBase工程师">颜然师兄</a>提供非daemon方式启动的方法。</p>

<h3>参考文献:</h3>

<blockquote><p>[1] 使用 GDB 调试多进程程序, <a href="http://www.ibm.com/developerworks/cn/linux/l-cn-gdbmp/">http://www.ibm.com/developerworks/cn/linux/l-cn-gdbmp/</a></p>

<p>[2] 韩富晟 支付宝颜然，玩大数据的，OceanBase工程师, <a href="http://weibo.com/hanfooo">http://weibo.com/hanfooo</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[夜空中最亮的星]]></title>
    <link href="http://cxh.me/2013/10/27/brightest-star-in-the-sky/"/>
    <updated>2013-10-27T10:41:00+08:00</updated>
    <id>http://cxh.me/2013/10/27/brightest-star-in-the-sky</id>
    <content type="html"><![CDATA[<!-- more -->


<p><embed src="http://player.yinyuetai.com/video/player/617278/v_0.swf" quality="high" width="480" height="334" align="middle"  allowScriptAccess="sameDomain" allowfullscreen="true" type="application/x-shockwave-flash"></embed></p>
]]></content>
  </entry>
  
</feed>
