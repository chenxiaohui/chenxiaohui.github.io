<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CXH.ME]]></title>
  <link href="http://cxh.me/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2015-04-19T22:35:35+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[maven download dependency挂住的问题]]></title>
    <link href="http://cxh.me/2015/04/19/maven-download-stuck/"/>
    <updated>2015-04-19T22:08:00+08:00</updated>
    <id>http://cxh.me/2015/04/19/maven-download-stuck</id>
    <content type="html"><![CDATA[<p>  今天迁移工程到mac上，准备以后用mac作为主开发工具。迁移maven的时候发现，maven download会停在那里，如下：</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/maven_error.jpg"></p>

<p>   解决如下：</p>

<ol>
<li>怀疑http_proxy问题，去掉系统环境变量。无效</li>
<li>怀疑shadowsocks问题，关掉，无效。</li>
<li>maven配置问题，对比了默认配置，没什么错误的地方。</li>
<li>怀疑服务器问题，换成开源中国的maven源，ok，就是慢点。</li>
<li>继续等待，几分钟后报错： java.net.SocketException: Malformed reply from SOCKS server，似乎还是代理的问题。</li>
<li>查阅发现java还有自己的代理配置，见<a href="https://www.java.com/en/download/help/proxy_setup.xml" title="How do I configure proxy settings for Java?">参考文献</a>，去掉代理。貌似还是无效。</li>
<li>索性重启，搞定。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于sendmail邮件服务器的搭建]]></title>
    <link href="http://cxh.me/2015/04/01/something-about-sendmail-setup/"/>
    <updated>2015-04-01T20:14:00+08:00</updated>
    <id>http://cxh.me/2015/04/01/something-about-sendmail-setup</id>
    <content type="html"><![CDATA[<p>  还是reviewboard的事情，我们需要一个自己的邮件服务器来发通知邮件。sendmail是一个比较好的选择，搭建的方式很简单，安装sendmail，修改配置文件，修改local_host_name就行。如果不需要登陆验证，这样也就直接能用了。现在的问题是reviewboard是必须登陆验证的。至少看报错上是这样。</p>

<pre><code>SMTPException: SMTP AUTH extension not supported by server. reviewboard
</code></pre>

<p>  具体代码没细看，但是应该默认都有认证，只是认证方式不一样。我们telnet到25端口，执行</p>

<pre><code>ehlo localhost
</code></pre>

<p>  发现250 AUTH没有支持。所以需要配置邮件服务器的身份认证。详见<a href="http://blog.sina.com.cn/s/blog_6b61ec070101e161.html" title="CentOS sendmail安装及邮件域名配置">参考文献1</a><a href="http://ju.outofmemory.cn/entry/12533" title="testsaslauthd “authentication failed” 解决办法">参考文献2</a>。最后测试一下用户是否能通过验证和邮件能否正常发送：</p>

<pre><code>/usr/sbin/testsaslauthd -u username -p sohutest

mail -s "test" xxx@xxx.com &lt;content.txt
</code></pre>

<!--more-->


<p>  如果邮件不能正常发送可以通过如下方式debug：</p>

<pre><code>1. 查看/var/log/messages
2. 查看用户mail
3. 通过telnet模拟一下登陆发邮件的过程：

        HELO localhost
        AUTH LOGIN 
        aGFycnljaGVu
        c29odXRlc3Q=
        MAIL FROM:&lt;test@xxx.com&gt;
        RCPT TO:&lt;username@xxx.com&gt;
        DATA
        To: username@xxx.com
        From:test@xxx.com
        Subject:test mail
        From:test@xxx.com
        test body
        .
        quit
</code></pre>

<p>  安装reviewboard的过程还发现一个问题，邮件服务器已经可以正常发邮件了，reviewboard还是失败，看到如下报错：</p>

<pre><code>- Error sending e-mail notification with subject 'Review Request 2: [retrieval-ad][master][NewFeature] Readme' on behalf of '"UserName" &lt;xxx@xxx.com&gt;' to '"UserName" &lt;xxx@xxx.com&gt;,xxx@xxx.com'
Traceback (most recent call last):
  File "/opt/xxx/rb/lib/python2.7/site-packages/ReviewBoard-2.0.15-py2.7.egg/reviewboard/notifications/email.py", line 294, in send_review_mail
    message.send()
  File "/opt/xxx/rb/lib/python2.7/site-packages/Django-1.6.11-py2.7.egg/django/core/mail/message.py", line 276, in send
    return self.get_connection(fail_silently).send_messages([self])
  File "/opt/xxx/rb/lib/python2.7/site-packages/Django-1.6.11-py2.7.egg/django/core/mail/backends/smtp.py", line 87, in send_messages
    new_conn_created = self.open()
  File "/opt/xxx/rb/lib/python2.7/site-packages/Django-1.6.11-py2.7.egg/django/core/mail/backends/smtp.py", line 54, in open
    self.connection.login(self.username, self.password)
  File "/usr/local/lib/python2.7/smtplib.py", line 613, in login
    raise SMTPAuthenticationError(code, resp)
SMTPAuthenticationError: (535, '5.7.0 authentication failed')
</code></pre>

<p>  跟到如下smtplib.py里面看验证方法，调整了顺序（我这支持AUTH LOGIN PLAIN，没支持PAM)，然后保证用户名密码正确就基本可以使用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ps grep不显示grep自己本身的方法]]></title>
    <link href="http://cxh.me/2015/03/31/ps-do-not-grep-self/"/>
    <updated>2015-03-31T15:45:00+08:00</updated>
    <id>http://cxh.me/2015/03/31/ps-do-not-grep-self</id>
    <content type="html"><![CDATA[<p>  主要两种方式：</p>

<ol>
<li><p>不grep自己。</p>

<pre><code> -v, --invert-match
     Invert the sense of matching, to select non-matching lines.
 所以：
     ps xuf|grep python|grep -v grep
</code></pre></li>
<li><p>awk 略去最后一行。</p>

<pre><code> ps xuf|grep python|awk 'NR&gt;1{print p}{p=$2}'
</code></pre>

<p> 解释下：第一行的时候，NR=1不打印，但是把pid存在p中，下一行打印，最后一行的时候，打印的是上一行的pid。</p>

<p> awk博大精深&hellip;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReviewBoard客户端配置和代码review流程]]></title>
    <link href="http://cxh.me/2015/03/29/revreviewboard-specification/"/>
    <updated>2015-03-29T20:17:00+08:00</updated>
    <id>http://cxh.me/2015/03/29/revreviewboard-specification</id>
    <content type="html"><![CDATA[<h2>Postreview 客户端配置</h2>

<p>  reviewboard是群众喜闻乐见的代码review工具。本文主要涉及客户端配置和review流程，server端配置见<a href="http://cxh.me/2015/03/28/review-board-setup/" title="Reviewboard的安装">文档1</a>。</p>

<p>  首先安装python（必须的），之后安装post-review插件:</p>

<pre><code>pip:
    pip install --allow-external RBTools --allow-unverified RBTools RBTools
easy_install：
    easy_install -U RBTools
LinuxRPM:
    sudo yum install RBTools
直接安装：
    git clone git://github.com/reviewboard/rbtools.git
    cd rbtools
    python setup.py
</code></pre>

<p>  旧版的post-review有一个post-review的命令，新的只有rbt了，命令格式不太一样。</p>

<pre><code>post - Posts changes to Review Board
diff - Displays the diff that will be sent to Review Board
land - Lands a change in a local branch or on a review request
patch - Patches your tree with a change on a review request
setup-repo - Sets up RBTools to talk to your repository
</code></pre>

<p>  首先配置review board，HOME目录下简历.reviewboardrc如下：</p>

<pre><code>REVIEWBOARD_URL = 'http://10.16.10.74/'
  REPOSITORY = 'adrd-service'
</code></pre>

<p>  或者在代码目录执行rbt setup-repo，会生成上述文件。REPOSITORY原则上不配置也行。</p>

<h2>PostReview流程。</h2>

<p>　原则上git commit 之后，git push之前要提交post-review，保证代码修改相关人都知悉并ship修改才能提交。基本流程是：</p>

<pre><code>git add xx
git commit -m "message"
rbt post
</code></pre>

<p>  对同一个更改post之后如果要再次修改，可以：</p>

<pre><code>rbt post -r &lt;post_id&gt;
</code></pre>

<p>  post-id是每个post的url/r/后面的数字。post-review标题原则上按照如下规范：</p>

<pre><code>[repository_name][branch_name][NewFeature|BugFix|Refactor|Log] post-review title
</code></pre>

<p>  groups/people添加的人员原则上包括：</p>

<pre><code>1. 技术主管[mentor]
2. 合作者[partner]
2. 其他需要知悉修改的人[related]
</code></pre>

<p>  post-review旧版和svn的整合见<a href="http://cxh.me/2013/10/15/svn-vim-integration/" title="Svn Vim 整合方案">文档2</a>。
  post-review在svn和git同时托管的情况下处理冲突的方法见<a href="http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/" title="Post-review在svn和git共同存在下的冲突问题">文档3</a>。
  一个post-review的vim插件见<a href="http://cxh.me/2014/06/21/ppost-review-plugin/" title="Post-review插件">文档4</a>。</p>

<h3>Bibliography:</h3>

<blockquote><p>[1] Reviewboard的安装, <a href="http://cxh.me/2015/03/28/review-board-setup/">http://cxh.me/2015/03/28/review-board-setup/</a></p>

<p>[2] Svn Vim 整合方案, <a href="http://cxh.me/2013/10/15/svn-vim-integration/">http://cxh.me/2013/10/15/svn-vim-integration/</a></p>

<p>[3] Post-review在svn和git共同存在下的冲突问题, <a href="http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/">http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/</a></p>

<p>[4] Post-review插件, <a href="http://cxh.me/2014/06/21/ppost-review-plugin/">http://cxh.me/2014/06/21/ppost-review-plugin/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reviewboard的安装]]></title>
    <link href="http://cxh.me/2015/03/28/review-board-setup/"/>
    <updated>2015-03-28T21:15:00+08:00</updated>
    <id>http://cxh.me/2015/03/28/review-board-setup</id>
    <content type="html"><![CDATA[<p>  <a href="https://www.reviewboard.org" title="Review Board">reviewboard</a>是群众喜闻乐见的代码review工具。安装过程详见<a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/creating-sites/" title="Creating a Review Board Site">文档1</a><a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/linux/" title="Installing on Linux">文档2</a>。这些写一些遇到的问题：</p>

<ol>
<li><p>默认支持版本是django 1.6，最新的django1.7不支持。所以最好用virtualenv独立出一个环境来。</p></li>
<li><p>官方文档的apache不知道是怎样的目录结构，反正我自己安装的apache和yum install的都跟官方的目录结构不太一样。</p>

<ol>
<li><p>copy或者link apache-wsgi.conf到conf.d目录，etc/httpd结构如下</p>

<p> <img class="img-polaroid center" src="http://cxh.me/images/2015/etc_httpd.png"></p></li>
<li><p>配置下PythonHome</p>

<p> WSGIPythonHome /opt/harrychen/rb
 #WSGIPythonPath /var/www/reviewboard:/opt/harrychen/rb/lib/python2.7/site-packages</p></li>
<li><p>WSGIPythonPath <a href="https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/" title="How to use Django with Apache and mod_wsgi">文档</a>里说最好还是配置一下，但是有PythonHome貌似就行了</p></li>
<li><p>按提示给一些目录加权限。</p></li>
<li><p>rb-site install，建议直接放到var下，reviewboard的结构跟apache的默认/var/www下类似的。</p></li>
</ol>
</li>
</ol>


<!--more-->


<ol>
<li><p>yum install mod_wsgi所安装的mod_wsgi版本默认对应的还是2.6的python，所以不会去2.7的环境下找site-package，建议手动安装mod_wsgi。apache 安装mod_wsgi的过程参见<a href="http://cxh.me/2015/02/27/django-to-apache/" title="Django Mod_wsgi配置的一些问题">文档</a>。网上也看到过<a href="http://m.oschina.net/blog/341289" title="mod_wsgi在多个Python版本下配置apache">这个问题</a>。</p></li>
<li><p>apache log报错：couldn&rsquo;t perform authentication. AuthType not set!: /。</p>

<p> 貌似2.4之后才支持 Require all granted ，直接删掉。</p></li>
<li><p>django报错：ERROR: Invalid HTTP_HOST header: &lsquo;10.16.10.74&rsquo;.You may need to add u&#8217;10.16.10.74&#8217; to ALLOWED_HOSTS.</p>

<p> 这个问题当然不见得都会遇到，是我安装的时候想随意绑一个域名，然后本地用hosts指过去，再搞搞dns欺骗啥的大家就都可以用这个伪域名了，但是django非debug模式好像对这个要求很严&hellip;直接用ip就好。详见<a href="http://www.zijin5.com/django-1-5-debug-false/" title="django 1.5 当DEBUG设置为 False时网页打不开的解决办法">这里</a></p></li>
<li><p>the executable &ldquo;git&rdquo; is not in the path. 修改/etc/sysconfig/httpd加入环境变量/</p>

<p> apache没有环境变量。参见[文献8].</p></li>
<li><p>ServerLog：SMTPException: SMTP AUTH extension not supported by server.</p>

<p> 详见另一篇<a href="https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ" title="Error uploading new diff: fatal: Not a git repository: 'None'">文章</a>。</p></li>
<li><p>开始搭建的时候post上去总是报错：Got API Error 224 (HTTP code 400): The specified diff file could not be parsed 。</p>

<p> 开始怀疑是git权限，重新申请了git账号，用reviewboard自己生成的私钥公钥，结果一样。而且有的repo是正常的，后来想到可以手动diff，发现diff里面有修改的时候会报错，新增文件不会。网上搜到这个<a href="https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ" title="Error uploading new diff: fatal: Not a git repository: 'None'">讨论</a>，发现git（至少我安装的版本）不支持对某个commit下某个文件的访问，而reviewboard的逻辑实际上是先根据diff文件提取base revision，然后打上patch来显示两边的diff，这样就需要根据revisionid和filename来随机访问文件。查阅<a href="https://www.reviewboard.org/docs/manual/2.0/admin/configuration/repositories/" title="Repositories">文档10</a> 发现gitweb协议支持，按照gitweb和公司github的格式，填写Raw file URL mask，就可以正常访问了。格式大概是：</p>

<pre><code> git地址：git@github.xxx.com:username/xxx.git

 gitweb地址：http://git.kernel.org/?p=username/xx.git;a=blob_plain;f=\&lt;filename\&gt;;h=\&lt;revision\&gt;
</code></pre></li>
</ol>


<h3>Bibliography:</h3>

<blockquote><p>[1] Review Board, <a href="https://www.reviewboard.org">https://www.reviewboard.org</a></p>

<p>[2] Creating a Review Board Site, <a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/creating-sites/">https://www.reviewboard.org/docs/manual/2.5/admin/installation/creating-sites/</a></p>

<p>[3] Installing on Linux, <a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/linux/">https://www.reviewboard.org/docs/manual/2.5/admin/installation/linux/</a></p>

<p>[4] Django Mod_wsgi配置的一些问题, <a href="http://cxh.me/2015/02/27/django-to-apache/">http://cxh.me/2015/02/27/django-to-apache/</a></p>

<p>[5] mod_wsgi在多个Python版本下配置apache, <a href="http://m.oschina.net/blog/341289">http://m.oschina.net/blog/341289</a></p>

<p>[6] django 1.5 当DEBUG设置为 False时网页打不开的解决办法, <a href="http://www.zijin5.com/django-1-5-debug-false/">http://www.zijin5.com/django-1-5-debug-false/</a></p>

<p>[7] How to use Django with Apache and mod_wsgi&#8221; , <a href="https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/">https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/</a></p>

<p>[8] Setting Apache2 PATH environment variable, <a href="http://serverfault.com/questions/151328/setting-apache2-path-environment-variable">http://serverfault.com/questions/151328/setting-apache2-path-environment-variable</a></p>

<p>[9] Error uploading new diff: fatal: Not a git repository: &lsquo;None&rsquo;, <a href="https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ">https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ</a></p>

<p>[10] Repositories, <a href="https://www.reviewboard.org/docs/manual/2.0/admin/configuration/repositories/">https://www.reviewboard.org/docs/manual/2.0/admin/configuration/repositories/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim配置符号和跳转]]></title>
    <link href="http://cxh.me/2015/03/28/configure-vim-tags-and-jump/"/>
    <updated>2015-03-28T12:05:00+08:00</updated>
    <id>http://cxh.me/2015/03/28/configure-vim-tags-and-jump</id>
    <content type="html"><![CDATA[<p>  对于一个简单的开发环境，能实现tags的定位跳转，以及查询就够用了。这种情况下，vim + 一些插件完全能够满足要求，尤其对于python这样的脚本语言开发，vim比IDE更简洁。这里我们尝试把vim配置成一个精简的IDE。</p>

<p>  首先升级你的ctags，换成exuberantCtags，后者功能更强大，且对c++等语言的支持更好。</p>

<pre><code>ubuntu下可以直接：
    apt-get install exuberant-ctags 
centos下：
    yum install ctags
mac下：
    brew install ctags-exuberant
windows下：
    什么是windows?
</code></pre>

<p>  cscope如果系统没有默认安装的话也装一下。</p>

<p>  之后安装tags插件，相对<a href="http://www.vim.org/scripts/script.php?script_id=273" title="taglist.vim : Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc) ">taglist.vim</a>其实我们更推荐<a href="http://www.vim.org/scripts/script.php?script_id=3465" title="Tagbar : Display tags of the current file ordered by scope">tagbar.vim</a>，因其对面向对象特性支持的更好。</p>

<!--more-->


<p>  然后配置tagbar，第一部分只是配置了下system标记，效果如图所示:</p>

<pre><code>" system mark
if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:system='win'
else
    if has("unix")
        let s:uname = system("uname")
        if s:uname == "Darwin\n"
            let g:system='mac'
        else
            let g:system='unix'
        endif
    endif
endif

"{ tagbar - taglist replacement
    nmap &lt;silent&gt;&lt;S-f8&gt; :TagbarToggle&lt;CR&gt;
    if g:system=='win'
        let g:tagbar_ctags_bin = 'ctags.exe'
    else
        let g:tagbar_ctags_bin = 'ctags'
    endif
    let g:tagbar_autoclose = 1
    let g:tagbar_width = 30
    let g:tagbar_autofocus = 1
    let g:tagbar_sort = 0
    let g:tagbar_compact = 1
    let g:tagbar_autofocus = 1
"}
</code></pre>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/tagbar.png" title="tagbar界面" alt="tagbar界面"><p class="align-center">tagbar界面</p></p>

<p>  现在有了tag显示，我们希望能够自动加载tags，这样打开一个文件的时候就可以直接操作这个文件所在项目的tags了，针对这种情况，需要先定义一个项目的根目录，这就需要用到base_dir_mark（只是一个变量..名字你随便），我们对一个项目生成且只生成一次tags(和cscope.out)，放在这个目录下。我（改进）的插件cscope_maps.vim包含了对base_dir_mark的查找和定义：</p>

<pre><code>if !exists('g:base_dir_mark')
    "set base_dir_mark to indicate where to generate tags
    let g:base_dir_mark = 'tags'
endif

function! GetBaseDirectory()
    let max = 5
    let dir = getcwd()
    let i = 0
    while isdirectory(dir) &amp;&amp; i &lt; max
        if filereadable(dir .'/'. g:base_dir_mark)
            return dir.'/'
        endif
        let idx = strridx(dir, '/')
        let dir = dir[:idx-1]
        let i = i + 1
    endwhile
    return ''
endf

function! AutoLoadCTagsAndCScope()
    silent! execute 'cs kill -1'

    let base_dir=GetBaseDirectory()
    if !empty(base_dir)
        silent! execute 'cs add ' .base_dir . 'cscope.out'
    endif

    let ctags_dir=base_dir
    if !empty(ctags_dir)
        silent! execute 'set tags =' . ctags_dir . 'tags,'.$VIMFILES.'/tags/'.&amp;ft.'/tags'
    else
        silent! execute 'set tags ='.$VIMFILES.'/tags/'.&amp;ft.'/tags'
    endif
endf
</code></pre>

<p>  之后就可以配置让每次打开一个文件的时候都自动去项目根目录下找tags(和cscope.out)，把这个目录作为项目根目录了。</p>

<pre><code>"{ plugin -ctags 对tag的操作
set tags=tags
augroup TagGroup
    autocmd!
    "autocmd BufEnter *.* :exec 'set tags=tags,'.$VIMFILES.'/tags/'.&amp;ft.'/tags'
    autocmd BufEnter * :call AutoLoadCTagsAndCScope()
    "autocmd BufWritePost *.cpp,*.c,*.h :silent! execute "!ctags -R  -c++-kinds=+p --fields=+iaS --extra=+q ."
augroup END
"}
</code></pre>

<p>  注释掉的一行，我们放到shell中实现</p>

<pre><code>alias cr='find `pwd` -name "*.[ch]" -o -name "*.cpp" &gt; cscope.files &amp;&amp; ctags -R `pwd` --languages=c++ --c++-kinds=+px --fields=+iaKSz --extra=+q &amp;&amp; cscope -Rb &amp;&amp; rm -f cscope.files'
</code></pre>

<p>  这样在项目根目录执行一下cr来生成tags和cscope.out，这个操作同时确定了项目的根目录是哪里。至于自动更新tags，意义不是很大，而且开销有点高。</p>

<p>  最后是cscope的插件绑定，插件详见这个<a href="https://github.com/chenxiaohui/vim_cscope" title="vim_cscope - a vim plugin to configure vim_cscope">github repo</a>。配置如下：</p>

<pre><code>"{ plugin - cscopemaps.vim里面定义了键盘映射
let g:base_dir_mark = 'tags'
map &lt;silent&gt;&lt;F7&gt; :call AutoLoadCTagsAndCScope()&lt;CR&gt;
map &lt;silent&gt;&lt;C-F7&gt; :call Do_CsTag()&lt;CR&gt;
"map &lt;F3&gt; &lt;C-]&gt;
map &lt;F3&gt; :execute(":tj ".expand("&lt;cword&gt;"))&lt;cr&gt;
map &lt;m-left&gt; &lt;C-o&gt;
map &lt;m-right&gt; &lt;c-i&gt;

"map &lt;silent&gt;&lt;S-F4&gt;&lt;Esc&gt;:!ctags -R *&lt;CR&gt;
"map &lt;silent&gt;&lt;C-F4&gt;&lt;Esc&gt;:silent! execute "!ctags -R -c++-kinds=+p --fields=+iaS --extra=+q ."&lt;CR&gt;
"查找调用这个定义
"nmap &lt;C-\&gt;g :cs find g &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
"查找调用这个c符号的地方
nmap &lt;leader&gt;cf :cs find c &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
nmap &lt;leader&gt;ck :cs find s &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
nmap &lt;leader&gt;cg :cs find g &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
nmap &lt;leader&gt;ct :cs find t &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;

"查找调用这个函数的地方
"nmap &lt;C-\&gt;c :cs find c &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
"}
</code></pre>

<p>  这样就实现了在tag的跳转和查找。 Do_CsTag函数实现的功能跟shell alias基本一样。没有安装neocomplcache的可以map &lt;m-left> &lt;C-t>。效果如下所示：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/tags.png" title="自动load tags" alt="自动load tags"><p class="align-center">自动load tags</p>  <br/>
  <img class="img-polaroid center" src="http://cxh.me/images/2015/cscope.png" title="cscope find reference结果" alt="cscope find reference结果"><p class="align-center">cscope find reference结果</p></p>

<h3>Bibliography:</h3>

<blockquote><p>[1] Tagbar : Display tags of the current file ordered by scope, <a href="http://www.vim.org/scripts/script.php?script_id=3465">http://www.vim.org/scripts/script.php?script_id=3465</a></p>

<p>[2] taglist.vim : Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc) , <a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a></p>

<p>[3] vim_cscope &ndash; a vim plugin to configure vim_cscope, <a href="https://github.com/chenxiaohui/vim_cscope">https://github.com/chenxiaohui/vim_cscope</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[easy_install和pip的注意事项]]></title>
    <link href="http://cxh.me/2015/03/27/notes-on-easy-install-and-pip/"/>
    <updated>2015-03-27T11:13:00+08:00</updated>
    <id>http://cxh.me/2015/03/27/notes-on-easy-install-and-pip</id>
    <content type="html"><![CDATA[<p>  关于安装目录：</p>

<pre><code>dist-packages instead of site-packages. Third party Python software installed from Debian packages goes into dist-packages, not site-packages. This is to reduce conflict between the system Python, and any from-source Python build you might install manually.

dist-packages取代了site-packages。从Debian安装包安装的第三方的Python软件 被 安装到 dist-packages,不是 site-packages.这是为了减少，系统自带python 和 你手动安装的python 之间的冲突。

不过我感觉都在site-packages下...
</code></pre>

<p>  删除包：</p>

<pre><code>pip uninstall packageName
#自动删除
easy_install -mxN packageName
#手动删除
</code></pre>

<p>  显示安装的包：</p>

<pre><code>pip list
easy_install只能去安装目录看了。实际上是共享的。
</code></pre>

<p>  另外需要注意的就是不同的Python版本下会有不同的easy_install和pip，比如easy_install3/pip3等。</p>

<pre><code>pip -V 可以显示当前pip是针对哪个Python版本的
</code></pre>

<p>  可以用virtualenv来分离不同的环境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于ubuntu gnome下crontab运行的问题]]></title>
    <link href="http://cxh.me/2015/03/24/ubuntu-gnome-crontab/"/>
    <updated>2015-03-24T13:54:00+08:00</updated>
    <id>http://cxh.me/2015/03/24/ubuntu-gnome-crontab</id>
    <content type="html"><![CDATA[<p>  今天想在gnome下运行一个自动关机前的提示，发现crontab根本不起作用啊。以为是路径和root权限的问题，但是路径没问题，而且root的crontab必须要sudo crontab -e的，也就是说crontab还是执行在当前用户下。</p>

<p>  后来发现对图形界面程序来讲，crontab的进程需要指定输出到哪个显示的，也就是</p>

<pre><code>export DISPLAY=:0 #:0指第一个显示终端，ctrl+alt+f7那个
/usr/bin/notify-send "亲，该去运动了！！一分钟后关机，请保存所有未保存的Job."
sudo shutdown -h 1
</code></pre>

<p>  或者直接在crontab -e中指定环境变量：</p>

<pre><code>DISPLAY=:0
30 20 * * * /home/cxh/repo/scripts/shutdown.sh
</code></pre>

<p>  可以顺便制定一下其他变量</p>

<pre><code>SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=cxh #如果出现错误，或者有数据输出，数据作为邮件发给这个帐号
HOME=/home/cxh #使用者运行的路径,这里是根目录
</code></pre>

<p>  crontab出错的信息会发邮件到对应用户，mail或者cat /var/mail/$USER查看。d *清理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python2/Python3中文编码]]></title>
    <link href="http://cxh.me/2015/03/19/pythonencoding-problem-in-python2-and-python3/"/>
    <updated>2015-03-19T15:03:00+08:00</updated>
    <id>http://cxh.me/2015/03/19/pythonencoding-problem-in-python2-and-python3</id>
    <content type="html"><![CDATA[<p>  python2中需要区分另种不同形式的string，字符串和字节串（严格意义上讲，string就是字符串，字节串是bytes）。默认情况下，直接输入字符串格式为str，编码由文件编码指定，可以理解为ascii存储的某种形式，编码由编码方式决定。而python字符串是unicode内码的字符流，无论采用什么编码，长度都是由字符个数决定的，字符是最基本的操作对象。</p>

<p>  转换上，最终字符&#8221;xx&#8221;的编码由文件编码决定，u&#8221;xx&#8221;统一被转成unicode字符，对于某种编码的bytes，decode或者unicode函数把编码转成字符，对于unicode的字符，encode把字符编码为字节。</p>

<p>  命令行打印上看，字符直接打印的时候，程序会按照sys.defaultencoding编码输出字符，如果打印字节，需要保证编码跟terminal/IDE的默认编码一致。输入的时候应该不存在这个问题，terminal会按照编码sys.defaultencoding把输入转成unicode字符。</p>

<p>  python3中不存在这两种不同的编码形式了。string统一变成了unicode。略浪费。</p>

<p>  详见<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html" title="PYTHON-进阶-编码处理小结">参考文献</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse目录结构]]></title>
    <link href="http://cxh.me/2015/03/16/eclipse-project-structure/"/>
    <updated>2015-03-16T15:32:00+08:00</updated>
    <id>http://cxh.me/2015/03/16/eclipse-project-structure</id>
    <content type="html"><![CDATA[<p>  eclipse导入Intellij的maven工程的时候经常会出现如下的情况：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/before_refresh.png"></p>

<p>  目录结构太深了，解决方法也很简单，alt+f5 refresh maven project , 目录结构会被收起：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/after_refresh.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Linux 安装和卸载tar ball形式的程序]]></title>
    <link href="http://cxh.me/2015/03/16/linux-install-uninstall-tar-ball/"/>
    <updated>2015-03-16T12:11:00+08:00</updated>
    <id>http://cxh.me/2015/03/16/linux-install-uninstall-tar-ball</id>
    <content type="html"><![CDATA[<p>  源码安装的一些NOTE:</p>

<ol>
<li>首先./configure &mdash;helps是可以看到所有编译选项的。</li>
<li>centos下，<code>yum install xx.rpm</code>，可以安装依赖，ubuntu下：<code>apt-get build-dep xx</code></li>
<li>zsh下，./configure tab是会提示所有的编译选项的。</li>
<li><p>Makefile如果没有uninstall选项，更合理的办法似乎是：</p>

<ol>
<li><p>先install到一个单独目录：</p>

<p> find . -exec rm 安装目录/{} \;</p></li>
</ol>


<p> 文件夹自然会失败。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Log4cxx安装]]></title>
    <link href="http://cxh.me/2015/03/16/log4cxx-setup/"/>
    <updated>2015-03-16T11:49:00+08:00</updated>
    <id>http://cxh.me/2015/03/16/log4cxx-setup</id>
    <content type="html"><![CDATA[<p>  apache经典的项目，java下有log4j，c++下的实现是log4cxx，安装见<a href="http://www.codelast.com/?p=3211" title="[原创]    log4cxx在Linux下的安装、使用">参考文献</a>.</p>

<p>  主要有个编译问题，大概是C库和C++库的问题，把出错的地方的头文件都补上就行了。</p>

<ol>
<li>console.cpp ： #include &lt;string.h> #include &lt;stdio.h></li>
<li>socketoutputstream.cpp : #include &lt;string.h></li>
<li>inputstreamreader.cpp: #include &lt;string.h></li>
</ol>


<h3>Bibliography:</h3>

<blockquote><p>[1] [原创]  log4cxx在Linux下的安装、使用, <a href="http://www.codelast.com/?p=3211">http://www.codelast.com/?p=3211</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos下编译ffmpeg]]></title>
    <link href="http://cxh.me/2015/03/13/centos-compilecentos-compile-ffmpeg/"/>
    <updated>2015-03-13T11:27:00+08:00</updated>
    <id>http://cxh.me/2015/03/13/centos-compilecentos-compile-ffmpeg</id>
    <content type="html"><![CDATA[<p>  先安装能通过yum直接安装的</p>

<pre><code>yum install autoconf automake gcc gcc-c++ git libtool make nasm pkgconfig wget zlib-devel
yum install yasm SDL SDL-devel dirac dirac-devel gsm gsm-devel libvpx libvpx-devel gnutls gnutls-devel freetype freetype-devel openjpeg openjpeg-devel opus opus-devel
</code></pre>

<p>  剩下lame lame-devel libvpxlame-devel xvidcore xvidcore-devel faac faac-devel opencore-amr opencore-amr-devel faad2 a52dec libfaac 手动安装</p>

<!--more-->


<p>  安装libfaac</p>

<pre><code>wget http://downloads.sourceforge.net/project/faac/faac-src/faac-1.28/faac-1.28.tar.gz
  tar xvfz faac-1.28.tar.gz
  cd faac-1.28/
  修改源码：
  ./bootstrap
  ./configure --prefix=$HOME --enable-shared
  make
  make install
</code></pre>

<p>  安装libfdk_aac</p>

<pre><code>wget http://jaist.dl.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.4.tar.gz
tar zxvf fdk-aac-0.1.4.tar.gz
cd fdk-aac-0.1.4
./autogen.sh
./configure --prefix=$HOME --enable-shared
  make
  make install
</code></pre>

<p>  安装mp3lame</p>

<pre><code>wget http://jaist.dl.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
tar zxvf lame-3.99.5.tar.gz
cd lame-3.99.5.tar.gz
./configure --prefix=$HOME --enable-shared
  make
  make install  
</code></pre>

<p>  安装opencore-amr</p>

<pre><code>wget http://jaist.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.3.tar.gz
tar zxvf opencore-amr-0.1.3.tar.gz
cd opencore-amr-0.1.3
./configure --prefix=$HOME --enable-shared
  make
  make install  
</code></pre>

<p>  安装 vo_aacenc</p>

<pre><code>wget http://heanet.dl.sourceforge.net/project/opencore-amr/vo-aacenc/vo-aacenc-0.1.3.tar.gz
  tar zxvf vo-aacenc-0.1.3.tar.gz
  cd vo-aacenc-0.1.3
  ./configure --prefix=$HOME --enable-shared
  make
  make install
</code></pre>

<p>  安装libx264</p>

<pre><code>git clone git://git.videolan.org/x264.git
cd x264
  ./configure --prefix=$HOME --enable-shared
  make 
  make install
</code></pre>

<p>  安装ffmpeg</p>

<pre><code>git clone git://source.ffmpeg.org/ffmpeg.git ffmpeg
cd ffmpeg
./configure --prefix=$HOME --enable-libfaac --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libvo-aacenc --enable-libvorbis --enable-libvpx --enable-shared --enable-libx264 --enable-gpl --enable-nonfree --enable-version3 --enable-openssl --enable-gnutls --enable-zlib --extra-cflags="-I $HOME/include" --extra-ldflags="-L $HOME/lib"
make 
make install
</code></pre>

<p>  安装libav</p>

<pre><code>wget https://libav.org/releases/libav-11.2.tar.gz
tar zxvf libav-11.2.tar.gz
cd libav-11.2
export PKG_CONFIG_PATH=$HOME/lib/pkgconfig
./configure --prefix=$HOME --enable-libfaac --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libvo-aacenc --enable-libvorbis --enable-libvpx --enable-shared --enable-libx264 --enable-gpl --enable-nonfree --enable-version3 --enable-openssl --enable-gnutls --enable-zlib --extra-cflags="-I $HOME/include" --extra-ldflags="-L $HOME/lib"
make 
make install
</code></pre>

<p>  安装mplayer，只用来编解码，不需要界面</p>

<pre><code>./configure --prefix=$HOME --disable-gui --codecsdir=DIR
</code></pre>

<p>  去掉了一些不用的：</p>

<pre><code>--enable-rtmp --enable-libschroedinger   --enable-libspeex --enable-libtheora
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[登录非登录shell和sudo的环境变量]]></title>
    <link href="http://cxh.me/2015/03/08/env-with-login-non-login-shell-and-sudo/"/>
    <updated>2015-03-08T21:21:00+08:00</updated>
    <id>http://cxh.me/2015/03/08/env-with-login-non-login-shell-and-sudo</id>
    <content type="html"><![CDATA[<p>  关于登陆/非登录/交互/非交互shell的问题见<a href="http://blog.csdn.net/trochiluses/article/details/13767669" title=" bash 深入理解：交互式shell和非交互式shell、登录shell和非登录shell的区别">参考文献1</a>。今天遇到的问题是su/sudo的时候环境变量到底是怎么样的，执行了什么rc文件。</p>

<ol>
<li> sudo命令是以root的身份执行command命令，但是环境变量还是当前用户的，执行目录也仍然是当前目录
即环境变量和执行目录都不会切换到root</li>
<li> su &ndash; 命令是切换到另一个用户，环境变量会切换到username，执行目录会切换到目标用户username的家目录</li>
<li> su 命令仅切换用户身份，例如从A切换到B，执行whoami命令，显示的是用户B，但当前目录不会切换，
环境变量也仍未切换，仍为A用户的环境变量</li>
<li> sudo su 只是用sudo的权限来执行su命令，跟su本身一样。</li>
<li><p> visudo可以配置sudo的继承环境变量</p>

<p>Defaults    env_keep =  &ldquo;COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS JAVA_HOME PATH&rdquo;</p></li>
</ol>


<h3>Bibliography:</h3>

<blockquote><p>[1]  bash 深入理解：交互式shell和非交互式shell、登录shell和非登录shell的区别, <a href="http://blog.csdn.net/trochiluses/article/details/13767669">http://blog.csdn.net/trochiluses/article/details/13767669</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[编译hadoop native lib]]></title>
    <link href="http://cxh.me/2015/03/08/recompile-hadoop-native-lib/"/>
    <updated>2015-03-08T14:59:00+08:00</updated>
    <id>http://cxh.me/2015/03/08/recompile-hadoop-native-lib</id>
    <content type="html"><![CDATA[<p>  跑hadoop的时候总遇到这个问题，不影响但是比较烦：</p>

<pre><code>WARN util.NativeCodeLoader: Unable to load native-hadoop library for your platform… using builtin-java classes where applicable   
</code></pre>

<p>  大概原因是说为hadoop native library是32位系统编译的，在64位系统上会有这个提示，需要下载hadoop的源码重新编译。如下：</p>

<ol>
<li>安装maven.</li>
<li>配置好MAVEN_HOME/PATH</li>
<li>下载 hadoop-2.4.0-src.tar.gz。</li>
<li>安装protobuf2.5.0。</li>
<li>安装cmake.</li>
<li>安装openssl-devel</li>
<li>安装ant</li>
<li>安装zlib-devel</li>
<li>mvn package -Pdist,native -DskipTests -Dtar</li>
<li><p>配置hadoop 环境变量</p>

<pre><code> export HADOOP_COMMON_LIB_NATIVE_DIR="~/hadoop/lib/"
 export HADOOP_OPTS="$HADOOP_OPTS -Djava.library.path=~/hadoop/lib/"
</code></pre></li>
</ol>


<p>  遇到一个问题，openjdk好像没有tools.jar，所以需要安装sun的jdk，重新设置JAVA_HOME</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux ssh免密登陆和调试]]></title>
    <link href="http://cxh.me/2015/03/07/ssh-debug-and-passless-login/"/>
    <updated>2015-03-07T17:56:00+08:00</updated>
    <id>http://cxh.me/2015/03/07/ssh-debug-and-passless-login</id>
    <content type="html"><![CDATA[<p>   把一个公钥上传到服务器配置了免密登陆，ok之后再配置几台服务器之间的免密，发现不成功。尝试了如下几种定位方法：</p>

<ol>
<li>ssh目录权限。修改成.ssh 700，下面文件600。解决了一个的问题。其他几台还是不行。</li>
<li>查看sshd_config是否允许公钥登陆。看来不是这个问题。</li>
<li>ssh -v 看调试信息，发现尝试过publickey但是验证未通过。手动比对ssh 公钥发现无误。</li>
<li><p>搜索错误信息：Offering public key: /root/.ssh/id_rsa，有人说<a href="http://segmentfault.com/q/1010000000445726" title="CentOS SSH公钥登录问题">是因为.ssh目录没有ssh_home_t标签</a>， 通过这个命令查看文件夹或文件的标签</p>

<pre><code>[root@localhost ~]# ls -laZ
</code></pre>

<p>通过</p>

<pre><code>restorecon -r -vv /root/.ssh
</code></pre>

<p>来重置标签，但是没起作用。</p></li>
<li><p>设想可能是手动建立.ssh目录的问题，删除.ssh，通过ssh-keygen本地生成密钥并建立目录。问题解决。</p></li>
</ol>


<p>   补充一点细节。bash下似乎单行的function必须以分号结尾，我说怎么server登陆总报error end line xxx..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Apache的Virtual Server配置]]></title>
    <link href="http://cxh.me/2015/03/03/apache-virtual-server-conf/"/>
    <updated>2015-03-03T20:12:00+08:00</updated>
    <id>http://cxh.me/2015/03/03/apache-virtual-server-conf</id>
    <content type="html"><![CDATA[<p>  首先，virtual server的概念是说一个apache实例可以模拟出多个server，这些server通过不同的标识来区分（网卡IP/ServerName/端口/ServerPath)，每个虚拟的server最终对应到一个DocumentRoot。</p>

<p>  我们期望如下配置</p>

<pre><code>    80   -&gt; /           网站
            /mysite     子网站mysite
    8080 -&gt; /           网站news_auth
</code></pre>

<p>  配置如下：</p>

<!--more-->


<pre><code>&lt;VirtualHost *:80&gt;
    ServerName 127.0.0.1
    DocumentRoot /var/www/html/mysite/
    ServerPath /mysite
    WSGIScriptAlias /mysite /var/www/html/mysite/mysite/wsgi.py
    &lt;Directory /var/www/html/mysite/&gt;
        Order deny,allow 
        Allow from all
    &lt;/Directory&gt;
    &lt;Location "/static/"&gt;
         SetHandler None
    &lt;/Location&gt;
&lt;/VirtualHost&gt;

&lt;VirtualHost *:80&gt;
    ServerName 127.0.0.1
    DocumentRoot /var/www/html
    ServerPath /

    &lt;Directory /var/www/html&gt;
        Order deny,allow 
        Allow from all
    &lt;/Directory&gt;

&lt;/VirtualHost&gt;


&lt;VirtualHost *:8080&gt;
    ServerName 127.0.0.1
    DocumentRoot /var/www/html/news_auth
    ServerPath /

    WSGIScriptAlias / /var/www/html/news_auth/news_auth/wsgi.py
    &lt;Directory /var/www/html/news_auth/&gt;
        Order deny,allow 
        Allow from all
    &lt;/Directory&gt;

    &lt;Location "/static/"&gt;
         SetHandler None
    &lt;/Location&gt;
&lt;/VirtualHost&gt;
</code></pre>

<p>  一二节的顺序是不能颠倒的，否则apache把/mysite作为路径处理。这里还有个问题，static和其他引用url的处理，django下建议使用<a href="http://www.yihaomen.com/article/python/355.htm" title="Django url 标签的使用">url</a>/<a href="https://docs.djangoproject.com/en/1.7/howto/static-files/" title="Managing static files (CSS, images)">static</a>标签</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sudo的环境变量]]></title>
    <link href="http://cxh.me/2015/03/03/sudo-env/"/>
    <updated>2015-03-03T18:34:00+08:00</updated>
    <id>http://cxh.me/2015/03/03/sudo-env</id>
    <content type="html"><![CDATA[<p>  sudo的时候不会加载.bashrc什么的，今天就遇到了一个比较扯的问题。在home下安装了高版本的vim，bashrc里面PATH是home高于/bin的，但sudo vi的时候会调用系统的。尝试如下方式：</p>

<ol>
<li> 修改其他配置如.profile什么的。比较麻烦。</li>
<li> 修改sudoers里面env_keep，发现还是不起作用。</li>
<li><p> 修改sudoers里面secure_path，如下：</p>

<pre><code>Defaults    secure_path = /root/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
</code></pre></li>
</ol>


<p>  OK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试下CloudSight的图像识别]]></title>
    <link href="http://cxh.me/2015/03/01/test-cloudsight/"/>
    <updated>2015-03-01T20:58:00+08:00</updated>
    <id>http://cxh.me/2015/03/01/test-cloudsight</id>
    <content type="html"><![CDATA[<p>  偶然看到<a href="http://buzz.beebeeto.com/topic/45/" title="使用CloudSight API进行图像识别的Python脚本">这个</a>链接，一个识别图像并标注的，还蛮有意思。代码直接用示例里面的就可以, 需要注意两个问题：</p>

<ol>
<li> <a href="https://cloudsightapi.com/api_clients/new" title="New Project">注册一个项目</a>。ResponseType选择Product。</li>
<li> 必须上传网络链接，不能使用文件。</li>
</ol>


<p>  测试几个效果（多次返回结果不一定一样）：</p>

<ol>
<li> <a href="http://www.baidu.com/img/bdlogo.png" title="百度标识">百度首页</a>，识别为&#8221;百度标志&#8221;</li>
<li> <a href="http://ww4.sinaimg.cn/bmiddle/61d83ed4jw1epqi6itn8mj20az08caa8.jpg" title="陈吉宁校长">陈吉宁校长的头像</a>，识别为&#8221;男人的黑色西装外套&#8221; 或 &ldquo;男人的蓝色西装&rdquo;</li>
<li> <a href="http://cxh.me/images/common/baiyipiaopiao.jpg" title="背景图">我博客一张背景图</a>，识别为&#8221;女性的黑色T恤&#8221; 或 &ldquo;红色的通勤自行车&rdquo;</li>
</ol>


<p>  让我突然对这个tag算法很感兴趣。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下ffmpeg的编译]]></title>
    <link href="http://cxh.me/2015/03/01/compile-ffmpeg-under-mac/"/>
    <updated>2015-03-01T11:08:00+08:00</updated>
    <id>http://cxh.me/2015/03/01/compile-ffmpeg-under-mac</id>
    <content type="html"><![CDATA[<p>  基本步骤可以看<a href="http://www.liaoxuefeng.com/article/0013738927837699a7f3407ea5f4b5caf8e1ab47997d7c5000" title="Mac OS X编译ffmpeg">这个</a>，说两个问题：</p>

<ol>
<li><p>brew的formulae没有celt这个包。忽略了算了。</p></li>
<li><p>libaacplus安装的时候，</p>

<ol>
<li>首先这个地址<code>http://217.20.164.161/~tipok/aacplus/libaacplus-2.0.2.tar.gz</code>已经失效了，从网上下载的话，这个版本还是有问题，configure的时候会卡住，一些patch丢失了好像。建议直接fork <a href="https://github.com/Distrotech/libaacplus" title="Distrotech/libaacplus">github上的</a>。</li>
<li>这个branch也有问题，frontend链接的时候会提示<code>ld: symbol(s) not found for architecture x86_64</code>，直接从Makefile.am里面把frontend去掉算了。</li>
</ol>
</li>
<li><p>可以通过brew直接安装：</p>

<pre><code> brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-frei0r --with-libass --with-libvo-aacenc --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theora --with-tools
</code></pre></li>
<li><p>libav10.5之后没有avserver的安装了，虽然enable-avserver的选项还在，所以不同版本安装的卸载时候会有些残留文件。我的安装选项是：</p>

<pre><code>  --enable-libfaac --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-librtmp --enable-libschroedinger --enable-libspeex --enable-libtheora --enable-libvo-aacenc --enable-libvorbis --enable-avserver --enable-libvpx --enable-shared --enable-libx264 --enable-gpl --enable-nonfree --enable-version3 --enable-openssl --enable-gnutls --enable-zlib
</code></pre></li>
<li><p>Besides, 我发现brew可以列出configure选项，如下：</p>

<pre><code> brew options xxx
</code></pre></li>
</ol>


<p>  手动安装的话，可以通过./configure &mdash;help来查看。</p>
]]></content>
  </entry>
  
</feed>
