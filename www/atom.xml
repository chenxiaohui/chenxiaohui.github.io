<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[CXH.ME]]></title>
  <link href="http://cxh.me/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2015-07-15T14:40:02+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phibricator搭建过程总结]]></title>
    <link href="http://cxh.me/2015/07/07/phibricator-setup/"/>
    <updated>2015-07-07T17:45:00+08:00</updated>
    <id>http://cxh.me/2015/07/07/phibricator-setup</id>
    <content type="html"><![CDATA[<p>  <a href="http://phabricator.org/" title="Phibricator官网">Phibricator</a>是Facebook开源的一体化项目管理、代码review工具，主要特点是集成度高、界面漂亮。根据搭建的经验看，确实做的非常完善，各种细节用起来像是商业产品，不会像其他的开源产品那么难以配置。这里把配置过程根据回忆写一下：</p>

<p>  官方给出过一个一键安装的脚本，但是下载的时候感觉有点问题吧，下载完不是sh而是网页，而且我只有一台机器，环境都已经预先有了，也不想再搭一套LAMP。这里我们以centos5为例：</p>

<p>  首先安装httpd + mysql + php，由于centos5的版本太低，yum源里的mysql和php均低于phibricator要求的版本，我们需要先升级yum源，参见<a href="http://zengrong.net/post/1595.htm" title="升级CentOS 5.x中的PHP 5.1到5.3">参考文献</a>， 不过好像安装的时候没有php53u，而是直接php53</p>

<p>  之后把对应的扩展也装了:</p>

<pre><code>yum install php53-mbstring
yum install php53-mysql
</code></pre>

<!--more-->


<p>  升级mysql到mysql5.5，参见<a href="http://www.ha97.com/4145.html" title="RHEL/CentOS 5.x使用yum快速安装MySQL 5.5.x">参考文献</a>。中间遇到两个问题:</p>

<ol>
<li><p>mysql 启动失败，提示没有权限创建pid。su到mysql用户下发现/var/run目录mysql用户没有execute的权限：</p>

<p> usermod +x /var/run</p>

<p> 给目录加execute的权限</p></li>
<li><p>mysql_upgrade失败，直接提示FATAL ERROR:Upgrade failed，发现用户名密码的问题，root@localhost密码没变，root@127.0.0.1在升级之后好像没有密码了</p>

<p> SET PASSWORD FOR &lsquo;root&rsquo;@&lsquo;127.0.0.1&rsquo; = PASSWORD(&lsquo;newpass&rsquo;);</p>

<p> 重新设置密码。</p></li>
</ol>


<p>  之后去/var/www/html安装源码:</p>

<pre><code>$ git clone https://github.com/phacility/libphutil.git
$ git clone https://github.com/phacility/arcanist.git
$ git clone https://github.com/phacility/phabricator.git
</code></pre>

<p>  顺便装上一些别的php扩展：</p>

<pre><code>sudo yum install pcre-devel
sudo yum install php-pear
sudo yum install php53-process
sudo pecl install apc
</code></pre>

<p>  主要是提升性能的。然后配置httpd.conf</p>

<pre><code>&lt;VirtualHost *&gt;
  # Change this to the domain which points to your host.
  ServerName phabricator.example.com

  # Change this to the path where you put 'phabricator' when you checked it
  # out from GitHub when following the Installation Guide.
  #
  # Make sure you include "/webroot" at the end!
  DocumentRoot /path/to/phabricator/webroot

  RewriteEngine on
  RewriteRule ^/rsrc/(.*)     -                       [L,QSA]
  RewriteRule ^/favicon.ico   -                       [L,QSA]
  RewriteRule ^(.*)$          /index.php?__path__=$1  [B,L,QSA]
&lt;/VirtualHost&gt;
</code></pre>

<p>  最后一个Rule的B在我的httpd下不识别，所以直接去掉了，貌似没什么影响&hellip;重启之后到phibricator的源码目录执行：</p>

<pre><code>phabricator/ $ ./bin/storage upgrade
</code></pre>

<p>  按照提示可以配置mysql 用户名密码，之后可以看到建立了数据库结构。这时候访问host就能看到界面了。先注册管理员进去，能够看到一系列的TIPs，说明需要配置的地方。Phibricator在这方面非常人性化，按照提示一点点配置就可以了。直到解决大部分的warning。剩下的问题就是注册用户和邮件了。</p>

<p>  首先在auth上开启认证方式，这里我们还是比较传统，选择了用户名密码的方式，你也可以选择其他账号体系打通的方式。一个用户注册之后，管理员需要批准用户，这个用户才能登陆。我找了好久，才发现原来批准在这位置：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/approval-queue.png"></p>

<p>  最后是配置邮件服务器。首先你需要有个本地的或者其他提供商提供的邮件服务器。可以参考<a href="http://blog.csdn.net/lihongxun945/article/details/9030753" title="phabricator 邮件服务配置 备忘">这里</a>，PHP Mailer设置：</p>

<pre><code>phpmailer.mailer: set to "smtp".
phpmailer.smtp-host: smtp.xxx.com
phpmailer.smtp-port: 25
phpmailer.smtp-user: xxxx
phpmailer.smtp-password: xxxx
</code></pre>

<p>  之后重启daemon应该就能发送邮件了。删除用户非常有意思，ph只允许从命令行删除</p>

<pre><code>phabricator/ $ ./bin/remove destroy @harrychen
</code></pre>

<p>  之后会有一个有意思的界面：</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/delete-user.png"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[简历生成器（基于moderncv+latex）]]></title>
    <link href="http://cxh.me/2015/06/26/resume-generator-using-latex-and-moderncv/"/>
    <updated>2015-06-26T15:47:00+08:00</updated>
    <id>http://cxh.me/2015/06/26/resume-generator-using-latex-and-moderncv</id>
    <content type="html"><![CDATA[<p>项目地址: <a href="https://github.com/chenxiaohui/resume">https://github.com/chenxiaohui/resume</a></p>

<h1>说明</h1>

<p>通过文本文件生成简历tex的generator。最终生成pdf还是要靠Latex+Moderncv，环境请自行配置。</p>

<ul>
<li>windows下：<a href="http://www.ctex.org/HomePage">http://www.ctex.org/HomePage</a></li>
<li>Linux下：<a href="https://www.tug.org/texlive/">https://www.tug.org/texlive/</a></li>
<li>Mac下：<a href="https://tug.org/mactex/">https://tug.org/mactex/</a></li>
</ul>


<p>需要的包都通过sudo tlmgr install package来安装。字体主要使用了Times New Roman（西文）和 Kaiti SC（中文）。可根据喜好换。</p>

<h1>模板配置</h1>

<p>config.tex 定义了公共头文件，包括包含的宏包，版面的布置和字体语言。</p>

<p>xxtemplate.tex定义了模板。模板语法比较简单，不给出严谨的语法定义了，主要如下两点：</p>

<ol>
<li>%xxx% 表示一个变量，将来会从cv文件中查找对应名字的变量，找到之后替换这个%xxx%</li>
<li><p>%for=>xx% %endfor%表示一个循环，xx是section的name，将来会从cv文件中找到对应的section，然后parse section下的每个单独的项目，用结果替换for循环中的内容</p>

<ol>
<li>for循环中{0}{1}..表示一个for循环变量，cv中section下的条目会被分割成多个变量，顺序依次是0，1，2..，渲染的时候会对应的替换上述{0}{1}变量。如果数量不匹配会报错。</li>
</ol>
</li>
<li><p>如上语法部分关键字可以配置，在config.py中。可以酌情修改。</p></li>
</ol>


<p>xx.cv包含了简历内容，格式上参考了ini文件格式，但是略有不同。</p>

<ol>
<li>[section name]顶一个了一个section，对应简历中一个部分。section name的显示名称是在template里面写好的。这里的name只是给程序使用的，可以跟显示名称一致也可以不同。</li>
<li>不包含在某个section下的条目通过 key = value的方式定义。不能跨行，程序parse的时候只找第一个等号，后面有空格等符号都不影响。</li>
<li>section下的条目每条可以包含多个字段，字段之间默认用竖线（|）分割（可修改）。字段的数量需要跟模板中对应section下for循环体中变量的数量一致。</li>
</ol>


<p>程序中给出了几个实例，分别是英文、中文简历的template和cv文件，供参考。</p>

<h1>使用</h1>

<p>写好对应的cv和模板之后，make就行。open命令可能在mac之外的系统不能使用，建议注掉。</p>

<p>make distclean清空所有文件包括pdf</p>

<p>make again 是为了生成页码，xelatex跑第一遍的时候页码是乱码。</p>

<p>gen.py 文件格式如下：</p>

<pre><code>./gen.py &lt;template-file&gt; &lt;cvfile&gt; &lt;output-file&gt;
</code></pre>

<h1>参考文献:</h1>

<blockquote><p>[1] http moderncv 的笔记（支持中文）, <a href="http://www.xiangsun.org/tex/notes-on-moderncv">http://www.xiangsun.org/tex/notes-on-moderncv</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[基于zookeeper的配置管理客户端]]></title>
    <link href="http://cxh.me/2015/06/16/sohu-zk-client-document/"/>
    <updated>2015-06-16T16:28:00+08:00</updated>
    <id>http://cxh.me/2015/06/16/sohu-zk-client-document</id>
    <content type="html"><![CDATA[<p>名词解释：</p>

<p>  SeviceConfig:</p>

<pre><code>一个服务的所有配置存在一个目录下
</code></pre>

<p>  BucketConfig:</p>

<pre><code> Bucket的配置存在一个单独的子目录中
</code></pre>

<p>配置项类型：</p>

<ul>
<li>Integer</li>
<li>Long</li>
<li>Short</li>
<li>Float</li>
<li>Double</li>
<li>Byte[]</li>
<li>Boolean</li>
<li>String</li>
<li>自定义配置项 ConfigObject</li>
</ul>


<p>使用说明：</p>

<h3>POM：</h3>

<pre><code>&lt;dependency&gt;
  &lt;groupId&gt;com.sohu.adrd&lt;/groupId&gt;
  &lt;artifactId&gt;sohu-zk-client&lt;/artifactId&gt;
  &lt;version&gt;1.0.1&lt;/version&gt;
&lt;/dependency&gt;
</code></pre>

<h3>初始化</h3>

<p>  ServiceConfig.Instance().init(&ldquo;ConnectString&rdquo;, &ldquo;serviceName&rdquo;);//如果做测试可以用10.16.3.61:2181</p>

<p>  ServiceConfig.Instance().init(&ldquo;serviceName&rdquo;); 默认使用肖永磊的zk地址</p>

<p>配置项使用</p>

<p>  先给默认值</p>

<pre><code>private static long exploitDiscardTimespan = 7 * 86400L;
</code></pre>

<p>  可以保存个Instance()的引用</p>

<pre><code>private ServiceConfig serviceConfig = ServiceConfig.Instance();
</code></pre>

<p>  所有引用到的地方，通过如下方式取配置项（这是默认config）：</p>

<p>   serviceConfig.getLong(&ldquo;exploitDiscardTimespan&rdquo;, exploitDiscardTimespan)</p>

<p>  如果是BucketConfig(bucketConfig会在zookeeper上根目录下再增加一个Node，名字是bucket的名字，在此之下存储config)</p>

<p>   serviceConfig.Bucket(&ldquo;bucketName&rdquo;).getLong(&ldquo;exploitDiscardTimespan&rdquo;, exploitDiscardTimespan)</p>

<p>  这样server端更新配置的时候，serviceConfig会根据通知刷新自己的配置缓存，下次使用getLong的时候就得到了新的配置。</p>

<p>  上述getLong的过程包含了：</p>

<ol>
<li><p> 如果是Bucket配置，从Bucket中获取，如果找不到，从Service的配置获取，如果还是没有，返回默认值。</p></li>
<li><p> 对于返回默认值的情况，写回Zookeeper。</p></li>
<li><p> 如果Zookeeper端有修改，Zkclient会收到消息，重新update本地配置项的缓存。</p></li>
<li><p> 如果定义了handler调用handler，如下所述：</p></li>
</ol>


<p>  如果需要根据配置修改的通知来做出响应（这是默认事件，node_data_change)：</p>

<pre><code>ServiceConfig.Instance().addEventListener("task_period", new IEventHandler() {
  @Override
  public void process(ZkEvent event) {
    logger.info("update task period.");
    setDeclaredField(TimerTask.class, ServerTasks.this, "period", ServiceConfig.Instance().getLong("task_period", period));  
  }
});
</code></pre>

<p>  如果需要删除的通知：</p>

<pre><code>  ServiceConfig.Instance().addEventListener("task_period", EventType.NodeDeleted, new IEventHandler() {
  @Override
  public void process(ZkEvent event) {
    logger.info("update task period.");
    setDeclaredField(TimerTask.class, ServerTasks.this, "period", ServiceConfig.Instance().getLong("task_period", period));  
  }
});
</code></pre>

<h3>结合SpringFramework：</h3>

<pre><code>基本不变，只不过SpringFramework会先填充InitializingBean的域，这些值只有在出默认值的时候才会被采用。
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些python小技巧]]></title>
    <link href="http://cxh.me/2015/05/27/python-tricks/"/>
    <updated>2015-05-27T10:54:00+08:00</updated>
    <id>http://cxh.me/2015/05/27/python-tricks</id>
    <content type="html"><![CDATA[<ol>
<li><p>生成一个重复列表可以通过如下语句:</p>

<pre><code> [i] * n #这比[ i for _ in range(0,n) ]简洁太多
 同样可以"i" * n来生成字符串
</code></pre></li>
<li><p>map函数。</p>

<p> 可以用来分类函数和其调用参数，对于线程池比较有用。比如</p>

<pre><code> import urllib2 
 from multiprocessing.dummy import Pool as ThreadPool 

 urls = [
         'http://www.python.org', 
         # etc.. 
         ]

 pool = ThreadPool(4) 
 results = pool.map(urllib2.urlopen, urls)
 pool.close() 
 pool.join() 
</code></pre></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git远程分支不存在的问题]]></title>
    <link href="http://cxh.me/2015/05/11/git-remote-branch-not-exists/"/>
    <updated>2015-05-11T12:11:00+08:00</updated>
    <id>http://cxh.me/2015/05/11/git-remote-branch-not-exists</id>
    <content type="html"><![CDATA[<p>  建立了一个远程分支，提交到origin上之后，发现之前有一个同样的远程Repository存在，而且名字一样，这就比较D疼了，git branch -a 显示的分支里面的分支提交到了另一个Repository，但是这个Repository已经改名字了，虽然地址一样。</p>

<p>  搞来搞去之后发现git checkout远程分支的时候报不存在的问题，删除这个分支的时候同样有这个问题：</p>

<pre><code>unable to delete 'refactor': remote ref does not exist
</code></pre>

<p>  导致这个分支就这么存在着删不掉了。查stackoverflow有人给出<a href="http://stackoverflow.com/questions/10292480/when-deleting-remote-git-branch-error-unable-to-push-to-unqualified-destinatio" title="When deleting remote git branch “error: unable to push to unqualified destination”">如下的方案</a>：</p>

<pre><code>git fetch -p origin
</code></pre>

<p>  问题是能解决了，但是不太理解为什么。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下多屏幕移动窗口的快捷键]]></title>
    <link href="http://cxh.me/2015/05/10/mac-multi-screen-shortcut/"/>
    <updated>2015-05-10T15:50:00+08:00</updated>
    <id>http://cxh.me/2015/05/10/mac-multi-screen-shortcut</id>
    <content type="html"><![CDATA[<p>  mac下使用多屏幕的话，经常需要把一个窗口移动到另一个窗口，windows下有快捷键win+shift+左右，linux下貌似可以通过xdotool实现，绑定一个快捷键，xdotool帮助你移动窗口到一个绝对位置。如下：</p>

<pre><code>xdotool getactivewindow windowmove 0 y windowactivate windowfocus
xdotool getactivewindow windowmove 1280 y windowactivate windowfocus
</code></pre>

<p>  mac下没有找到对应的系统快捷键，虽然可以设定一个zoom键来完成窗口最适化，但是没有快捷键来完成窗口的移动。这里我们通过<a href="http://manytricks.com/moom/" title="Moom">Moom</a>实现。</p>

<p>  Moom是一个窗口管理工具，安装之后只有一个配置页面，但是你会发现鼠标移动到左上角窗口最适化的按钮上的时候会弹出一个窗口管理的提示框。如下：</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/moom_tooltip.png"></p>

<p>  然后我们配置窗口移动的功能，首先需要一个全局快捷键：</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/moom_shortcut.png"></p>

<p>  之后可以设置按下全局快捷键之后上下左右键的功能。有移动窗口，半最大化窗口，缩小放大和移动窗口到一个屏幕。</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/moom_config.png"></p>

<p>  这样就可以先按下全局快捷键，如下：</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/moom_press_shortcut.png"></p>

<p>  再通过你定义的快捷键来移动窗口了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins 安装配置]]></title>
    <link href="http://cxh.me/2015/04/23/jenkins-setup/"/>
    <updated>2015-04-23T13:57:00+08:00</updated>
    <id>http://cxh.me/2015/04/23/jenkins-setup</id>
    <content type="html"><![CDATA[<p>   首先介绍一下Jenkins，如果你熟悉自动化构建的话，那么肯定听说过hudson。Jenkins是hudson的开发者跟Oracle撕bi之后，另立门户的一个hudson分支。当然这么说似乎不太靠谱，目前hudson已经不维护了毕竟，而Jenkins的开发社区还是很活跃的，各种插件层出不穷。总的来说，如果你不是已经习惯了hudson并且有一个能用的副本，都应该迁移到Jenkins。</p>

<p>   下面说一下如何</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一些瞬间]]></title>
    <link href="http://cxh.me/2015/04/22/some-moments/"/>
    <updated>2015-04-22T22:08:00+08:00</updated>
    <id>http://cxh.me/2015/04/22/some-moments</id>
    <content type="html"><![CDATA[<p>  回想一些事情的时候感觉印象最深刻的往往不是一段时间，而是一些瞬间。比如大学毕业晚会的那个晚上，大家喝的一塌糊涂，早晨醒来，看依然灿烂的阳光，那种孤独感是能镌刻很久的。再比如在北航的时候，那时候习惯晚上看书，安静，一个人在三号楼前的空地走走，听学院路上的川流不息的车声。事情已经远去，感觉依然清晰。每个片段好像人生路上的benchmark，只不过留下最深印象的，往往不是所得，而是所感。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[post-review编码问题]]></title>
    <link href="http://cxh.me/2015/04/22/post-review-encoding-problem/"/>
    <updated>2015-04-22T16:08:00+08:00</updated>
    <id>http://cxh.me/2015/04/22/post-review-encoding-problem</id>
    <content type="html"><![CDATA[<p>  windows下post-review遇到一个问题（不是我，不用windows）。python会报错：</p>

<pre><code>UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position xxx: ordinal not in range(128)     
</code></pre>

<p>  又是编码的问题啊，我不想去看post-review的源码，所以还是改默认环境的源码好了。找到rbtools\utils\process.py，import sys后面加两行：</p>

<pre><code>reload(sys)
sys.setdefaultencoding("utf-8") 
</code></pre>

<p>  Ok.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[partition算法的落点讨论]]></title>
    <link href="http://cxh.me/2015/04/20/partition-algorith-quit-position-analysis/"/>
    <updated>2015-04-20T21:27:00+08:00</updated>
    <id>http://cxh.me/2015/04/20/partition-algorith-quit-position-analysis</id>
    <content type="html"><![CDATA[<p>  首先这里的partition算法指的是快速排序中把数据分区的算法，算法接受一个数列和一个值，返回一个位置，这个位置之前的元素都小于等于输入值，之后的元素都大于等于输入值。</p>

<p>  算法如下：</p>

<p>  还有一种常见的形式：</p>

<p>  这里我们讨论下落点的情况，如果partition算法可以传入任何的value，而不是快排中那样从序列中随机获得一个值，那么结果就会有多重情况了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[maven download dependency挂住的问题]]></title>
    <link href="http://cxh.me/2015/04/19/maven-download-stuck/"/>
    <updated>2015-04-19T22:08:00+08:00</updated>
    <id>http://cxh.me/2015/04/19/maven-download-stuck</id>
    <content type="html"><![CDATA[<p>  今天迁移工程到mac上，准备以后用mac作为主开发工具。迁移maven的时候发现，maven download会停在那里，如下：</p>

<p><img class="img-polaroid center" src="http://cxh.me/images/2015/maven_error.jpg"></p>

<p>   解决如下：</p>

<ol>
<li>怀疑http_proxy问题，去掉系统环境变量。无效</li>
<li>怀疑shadowsocks问题，关掉，无效。</li>
<li>maven配置问题，对比了默认配置，没什么错误的地方。</li>
<li>怀疑服务器问题，换成开源中国的maven源，ok，就是慢点。</li>
<li>继续等待，几分钟后报错： java.net.SocketException: Malformed reply from SOCKS server，似乎还是代理的问题。</li>
<li>查阅发现java还有自己的代理配置，见<a href="https://www.java.com/en/download/help/proxy_setup.xml" title="How do I configure proxy settings for Java?">参考文献</a>，去掉代理。貌似还是无效。</li>
<li>索性重启，搞定。</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于sendmail邮件服务器的搭建]]></title>
    <link href="http://cxh.me/2015/04/01/something-about-sendmail-setup/"/>
    <updated>2015-04-01T20:14:00+08:00</updated>
    <id>http://cxh.me/2015/04/01/something-about-sendmail-setup</id>
    <content type="html"><![CDATA[<p>  还是reviewboard的事情，我们需要一个自己的邮件服务器来发通知邮件。sendmail是一个比较好的选择，搭建的方式很简单，安装sendmail，修改配置文件，修改local_host_name就行。如果不需要登陆验证，这样也就直接能用了。现在的问题是reviewboard是必须登陆验证的。至少看报错上是这样。</p>

<pre><code>SMTPException: SMTP AUTH extension not supported by server. reviewboard
</code></pre>

<p>  具体代码没细看，但是应该默认都有认证，只是认证方式不一样。我们telnet到25端口，执行</p>

<pre><code>ehlo localhost
</code></pre>

<p>  发现250 AUTH没有支持。所以需要配置邮件服务器的身份认证。详见<a href="http://blog.sina.com.cn/s/blog_6b61ec070101e161.html" title="CentOS sendmail安装及邮件域名配置">参考文献1</a><a href="http://ju.outofmemory.cn/entry/12533" title="testsaslauthd “authentication failed” 解决办法">参考文献2</a>。最后测试一下用户是否能通过验证和邮件能否正常发送：</p>

<pre><code>/usr/sbin/testsaslauthd -u username -p sohutest

mail -s "test" xxx@xxx.com &lt;content.txt
</code></pre>

<!--more-->


<p>  如果邮件不能正常发送可以通过如下方式debug：</p>

<pre><code>1. 查看/var/log/messages
2. 查看用户mail
3. 通过telnet模拟一下登陆发邮件的过程：

        HELO localhost
        AUTH LOGIN 
        aGFycnljaGVu
        c29odXRlc3Q=
        MAIL FROM:&lt;test@xxx.com&gt;
        RCPT TO:&lt;username@xxx.com&gt;
        DATA
        To: username@xxx.com
        From:test@xxx.com
        Subject:test mail
        From:test@xxx.com
        test body
        .
        quit
</code></pre>

<p>  安装reviewboard的过程还发现一个问题，邮件服务器已经可以正常发邮件了，reviewboard还是失败，看到如下报错：</p>

<pre><code>- Error sending e-mail notification with subject 'Review Request 2: [retrieval-ad][master][NewFeature] Readme' on behalf of '"UserName" &lt;xxx@xxx.com&gt;' to '"UserName" &lt;xxx@xxx.com&gt;,xxx@xxx.com'
Traceback (most recent call last):
  File "/opt/xxx/rb/lib/python2.7/site-packages/ReviewBoard-2.0.15-py2.7.egg/reviewboard/notifications/email.py", line 294, in send_review_mail
    message.send()
  File "/opt/xxx/rb/lib/python2.7/site-packages/Django-1.6.11-py2.7.egg/django/core/mail/message.py", line 276, in send
    return self.get_connection(fail_silently).send_messages([self])
  File "/opt/xxx/rb/lib/python2.7/site-packages/Django-1.6.11-py2.7.egg/django/core/mail/backends/smtp.py", line 87, in send_messages
    new_conn_created = self.open()
  File "/opt/xxx/rb/lib/python2.7/site-packages/Django-1.6.11-py2.7.egg/django/core/mail/backends/smtp.py", line 54, in open
    self.connection.login(self.username, self.password)
  File "/usr/local/lib/python2.7/smtplib.py", line 613, in login
    raise SMTPAuthenticationError(code, resp)
SMTPAuthenticationError: (535, '5.7.0 authentication failed')
</code></pre>

<p>  跟到如下smtplib.py里面看验证方法，调整了顺序（我这支持AUTH LOGIN PLAIN，没支持PAM)，然后保证用户名密码正确就基本可以使用了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ps grep不显示grep自己本身的方法]]></title>
    <link href="http://cxh.me/2015/03/31/ps-do-not-grep-self/"/>
    <updated>2015-03-31T15:45:00+08:00</updated>
    <id>http://cxh.me/2015/03/31/ps-do-not-grep-self</id>
    <content type="html"><![CDATA[<p>  主要两种方式：</p>

<ol>
<li><p>不grep自己。</p>

<pre><code> -v, --invert-match
     Invert the sense of matching, to select non-matching lines.
 所以：
     ps xuf|grep python|grep -v grep
</code></pre></li>
<li><p>awk 略去最后一行。</p>

<pre><code> ps xuf|grep python|awk 'NR&gt;1{print p}{p=$2}'
</code></pre>

<p> 解释下：第一行的时候，NR=1不打印，但是把pid存在p中，下一行打印，最后一行的时候，打印的是上一行的pid。</p>

<p> awk博大精深&hellip;</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReviewBoard客户端配置和代码review流程]]></title>
    <link href="http://cxh.me/2015/03/29/revreviewboard-specification/"/>
    <updated>2015-03-29T20:17:00+08:00</updated>
    <id>http://cxh.me/2015/03/29/revreviewboard-specification</id>
    <content type="html"><![CDATA[<h2>Postreview 客户端配置</h2>

<p>  reviewboard是群众喜闻乐见的代码review工具。本文主要涉及客户端配置和review流程，server端配置见<a href="http://cxh.me/2015/03/28/review-board-setup/" title="Reviewboard的安装">文档1</a>。</p>

<p>  首先安装python（必须的），之后安装post-review插件:</p>

<pre><code>pip:
    pip install --allow-external RBTools --allow-unverified RBTools RBTools
easy_install：
    easy_install -U RBTools
LinuxRPM:
    sudo yum install RBTools
直接安装：
    git clone git://github.com/reviewboard/rbtools.git
    cd rbtools
    python setup.py
</code></pre>

<p>  旧版的post-review有一个post-review的命令，新的只有rbt了，命令格式不太一样。</p>

<pre><code>post - Posts changes to Review Board
diff - Displays the diff that will be sent to Review Board
land - Lands a change in a local branch or on a review request
patch - Patches your tree with a change on a review request
setup-repo - Sets up RBTools to talk to your repository
</code></pre>

<p>  首先配置review board，HOME目录下简历.reviewboardrc如下：</p>

<pre><code>REVIEWBOARD_URL = 'http://10.16.10.74/'
  REPOSITORY = 'adrd-service'
</code></pre>

<p>  或者在代码目录执行rbt setup-repo，会生成上述文件。REPOSITORY原则上不配置也行。</p>

<h2>PostReview流程。</h2>

<p>　原则上git commit 之后，git push之前要提交post-review，保证代码修改相关人都知悉并ship修改才能提交。基本流程是：</p>

<pre><code>git add xx
git commit -m "message"
rbt post
</code></pre>

<p>  对同一个更改post之后如果要再次修改，可以：</p>

<pre><code>rbt post -r &lt;post_id&gt;
</code></pre>

<p>  post-id是每个post的url/r/后面的数字。post-review标题原则上按照如下规范：</p>

<pre><code>[repository_name][branch_name][NewFeature|BugFix|Refactor|Log] post-review title
</code></pre>

<p>  groups/people添加的人员原则上包括：</p>

<pre><code>1. 技术主管[mentor]
2. 合作者[partner]
2. 其他需要知悉修改的人[related]
</code></pre>

<p>  post-review旧版和svn的整合见<a href="http://cxh.me/2013/10/15/svn-vim-integration/" title="Svn Vim 整合方案">文档2</a>。
  post-review在svn和git同时托管的情况下处理冲突的方法见<a href="http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/" title="Post-review在svn和git共同存在下的冲突问题">文档3</a>。
  一个post-review的vim插件见<a href="http://cxh.me/2014/06/21/ppost-review-plugin/" title="Post-review插件">文档4</a>。</p>

<h3>Bibliography:</h3>

<blockquote><p>[1] Reviewboard的安装, <a href="http://cxh.me/2015/03/28/review-board-setup/">http://cxh.me/2015/03/28/review-board-setup/</a></p>

<p>[2] Svn Vim 整合方案, <a href="http://cxh.me/2013/10/15/svn-vim-integration/">http://cxh.me/2013/10/15/svn-vim-integration/</a></p>

<p>[3] Post-review在svn和git共同存在下的冲突问题, <a href="http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/">http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/</a></p>

<p>[4] Post-review插件, <a href="http://cxh.me/2014/06/21/ppost-review-plugin/">http://cxh.me/2014/06/21/ppost-review-plugin/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[reviewboard的安装]]></title>
    <link href="http://cxh.me/2015/03/28/review-board-setup/"/>
    <updated>2015-03-28T21:15:00+08:00</updated>
    <id>http://cxh.me/2015/03/28/review-board-setup</id>
    <content type="html"><![CDATA[<p>  <a href="https://www.reviewboard.org" title="Review Board">reviewboard</a>是群众喜闻乐见的代码review工具。安装过程详见<a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/creating-sites/" title="Creating a Review Board Site">文档1</a><a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/linux/" title="Installing on Linux">文档2</a>。这些写一些遇到的问题：</p>

<ol>
<li><p>默认支持版本是django 1.6，最新的django1.7不支持。所以最好用virtualenv独立出一个环境来。</p></li>
<li><p>官方文档的apache不知道是怎样的目录结构，反正我自己安装的apache和yum install的都跟官方的目录结构不太一样。</p>

<ol>
<li><p>copy或者link apache-wsgi.conf到conf.d目录，etc/httpd结构如下</p>

<p> <img class="img-polaroid center" src="http://cxh.me/images/2015/etc_httpd.png"></p></li>
<li><p>配置下PythonHome</p>

<p> WSGIPythonHome /opt/harrychen/rb
 #WSGIPythonPath /var/www/reviewboard:/opt/harrychen/rb/lib/python2.7/site-packages</p></li>
<li><p>WSGIPythonPath <a href="https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/" title="How to use Django with Apache and mod_wsgi">文档</a>里说最好还是配置一下，但是有PythonHome貌似就行了</p></li>
<li><p>按提示给一些目录加权限。</p></li>
<li><p>rb-site install，建议直接放到var下，reviewboard的结构跟apache的默认/var/www下类似的。</p></li>
</ol>
</li>
</ol>


<!--more-->


<ol>
<li><p>yum install mod_wsgi所安装的mod_wsgi版本默认对应的还是2.6的python，所以不会去2.7的环境下找site-package，建议手动安装mod_wsgi。apache 安装mod_wsgi的过程参见<a href="http://cxh.me/2015/02/27/django-to-apache/" title="Django Mod_wsgi配置的一些问题">文档</a>。网上也看到过<a href="http://m.oschina.net/blog/341289" title="mod_wsgi在多个Python版本下配置apache">这个问题</a>。</p></li>
<li><p>apache log报错：couldn&rsquo;t perform authentication. AuthType not set!: /。</p>

<p> 貌似2.4之后才支持 Require all granted ，直接删掉。</p></li>
<li><p>django报错：ERROR: Invalid HTTP_HOST header: &lsquo;10.16.10.74&rsquo;.You may need to add u&#8217;10.16.10.74&#8217; to ALLOWED_HOSTS.</p>

<p> 这个问题当然不见得都会遇到，是我安装的时候想随意绑一个域名，然后本地用hosts指过去，再搞搞dns欺骗啥的大家就都可以用这个伪域名了，但是django非debug模式好像对这个要求很严&hellip;直接用ip就好。详见<a href="http://www.zijin5.com/django-1-5-debug-false/" title="django 1.5 当DEBUG设置为 False时网页打不开的解决办法">这里</a></p></li>
<li><p>the executable &ldquo;git&rdquo; is not in the path. 修改/etc/sysconfig/httpd加入环境变量/</p>

<p> apache没有环境变量。参见[文献8].</p></li>
<li><p>ServerLog：SMTPException: SMTP AUTH extension not supported by server.</p>

<p> 详见另一篇<a href="https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ" title="Error uploading new diff: fatal: Not a git repository: 'None'">文章</a>。</p></li>
<li><p>开始搭建的时候post上去总是报错：Got API Error 224 (HTTP code 400): The specified diff file could not be parsed 。</p>

<p> 开始怀疑是git权限，重新申请了git账号，用reviewboard自己生成的私钥公钥，结果一样。而且有的repo是正常的，后来想到可以手动diff，发现diff里面有修改的时候会报错，新增文件不会。网上搜到这个<a href="https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ" title="Error uploading new diff: fatal: Not a git repository: 'None'">讨论</a>，发现git（至少我安装的版本）不支持对某个commit下某个文件的访问，而reviewboard的逻辑实际上是先根据diff文件提取base revision，然后打上patch来显示两边的diff，这样就需要根据revisionid和filename来随机访问文件。查阅<a href="https://www.reviewboard.org/docs/manual/2.0/admin/configuration/repositories/" title="Repositories">文档10</a> 发现gitweb协议支持，按照gitweb和公司github的格式，填写Raw file URL mask，就可以正常访问了。格式大概是：</p>

<pre><code> git地址：git@github.xxx.com:username/xxx.git

 gitweb地址：http://git.kernel.org/?p=username/xx.git;a=blob_plain;f=\&lt;filename\&gt;;h=\&lt;revision\&gt;
</code></pre></li>
</ol>


<h3>Bibliography:</h3>

<blockquote><p>[1] Review Board, <a href="https://www.reviewboard.org">https://www.reviewboard.org</a></p>

<p>[2] Creating a Review Board Site, <a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/creating-sites/">https://www.reviewboard.org/docs/manual/2.5/admin/installation/creating-sites/</a></p>

<p>[3] Installing on Linux, <a href="https://www.reviewboard.org/docs/manual/2.5/admin/installation/linux/">https://www.reviewboard.org/docs/manual/2.5/admin/installation/linux/</a></p>

<p>[4] Django Mod_wsgi配置的一些问题, <a href="http://cxh.me/2015/02/27/django-to-apache/">http://cxh.me/2015/02/27/django-to-apache/</a></p>

<p>[5] mod_wsgi在多个Python版本下配置apache, <a href="http://m.oschina.net/blog/341289">http://m.oschina.net/blog/341289</a></p>

<p>[6] django 1.5 当DEBUG设置为 False时网页打不开的解决办法, <a href="http://www.zijin5.com/django-1-5-debug-false/">http://www.zijin5.com/django-1-5-debug-false/</a></p>

<p>[7] How to use Django with Apache and mod_wsgi&#8221; , <a href="https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/">https://docs.djangoproject.com/en/1.7/howto/deployment/wsgi/modwsgi/</a></p>

<p>[8] Setting Apache2 PATH environment variable, <a href="http://serverfault.com/questions/151328/setting-apache2-path-environment-variable">http://serverfault.com/questions/151328/setting-apache2-path-environment-variable</a></p>

<p>[9] Error uploading new diff: fatal: Not a git repository: &lsquo;None&rsquo;, <a href="https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ">https://groups.google.com/forum/#!msg/reviewboard/13BAerbTT7g/84uAp6VZ6fEJ</a></p>

<p>[10] Repositories, <a href="https://www.reviewboard.org/docs/manual/2.0/admin/configuration/repositories/">https://www.reviewboard.org/docs/manual/2.0/admin/configuration/repositories/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim配置符号和跳转]]></title>
    <link href="http://cxh.me/2015/03/28/configure-vim-tags-and-jump/"/>
    <updated>2015-03-28T12:05:00+08:00</updated>
    <id>http://cxh.me/2015/03/28/configure-vim-tags-and-jump</id>
    <content type="html"><![CDATA[<p>  对于一个简单的开发环境，能实现tags的定位跳转，以及查询就够用了。这种情况下，vim + 一些插件完全能够满足要求，尤其对于python这样的脚本语言开发，vim比IDE更简洁。这里我们尝试把vim配置成一个精简的IDE。</p>

<p>  首先升级你的ctags，换成exuberantCtags，后者功能更强大，且对c++等语言的支持更好。</p>

<pre><code>ubuntu下可以直接：
    apt-get install exuberant-ctags 
centos下：
    yum install ctags
mac下：
    brew install ctags-exuberant
windows下：
    什么是windows?
</code></pre>

<p>  cscope如果系统没有默认安装的话也装一下。</p>

<p>  之后安装tags插件，相对<a href="http://www.vim.org/scripts/script.php?script_id=273" title="taglist.vim : Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc) ">taglist.vim</a>其实我们更推荐<a href="http://www.vim.org/scripts/script.php?script_id=3465" title="Tagbar : Display tags of the current file ordered by scope">tagbar.vim</a>，因其对面向对象特性支持的更好。</p>

<!--more-->


<p>  然后配置tagbar，第一部分只是配置了下system标记，效果如图所示:</p>

<pre><code>" system mark
if(has("win32") || has("win95") || has("win64") || has("win16"))
    let g:system='win'
else
    if has("unix")
        let s:uname = system("uname")
        if s:uname == "Darwin\n"
            let g:system='mac'
        else
            let g:system='unix'
        endif
    endif
endif

"{ tagbar - taglist replacement
    nmap &lt;silent&gt;&lt;S-f8&gt; :TagbarToggle&lt;CR&gt;
    if g:system=='win'
        let g:tagbar_ctags_bin = 'ctags.exe'
    else
        let g:tagbar_ctags_bin = 'ctags'
    endif
    let g:tagbar_autoclose = 1
    let g:tagbar_width = 30
    let g:tagbar_autofocus = 1
    let g:tagbar_sort = 0
    let g:tagbar_compact = 1
    let g:tagbar_autofocus = 1
"}
</code></pre>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/tagbar.png" title="tagbar界面" alt="tagbar界面"><p class="align-center">tagbar界面</p></p>

<p>  现在有了tag显示，我们希望能够自动加载tags，这样打开一个文件的时候就可以直接操作这个文件所在项目的tags了，针对这种情况，需要先定义一个项目的根目录，这就需要用到base_dir_mark（只是一个变量..名字你随便），我们对一个项目生成且只生成一次tags(和cscope.out)，放在这个目录下。我（改进）的插件cscope_maps.vim包含了对base_dir_mark的查找和定义：</p>

<pre><code>if !exists('g:base_dir_mark')
    "set base_dir_mark to indicate where to generate tags
    let g:base_dir_mark = 'tags'
endif

function! GetBaseDirectory()
    let max = 5
    let dir = getcwd()
    let i = 0
    while isdirectory(dir) &amp;&amp; i &lt; max
        if filereadable(dir .'/'. g:base_dir_mark)
            return dir.'/'
        endif
        let idx = strridx(dir, '/')
        let dir = dir[:idx-1]
        let i = i + 1
    endwhile
    return ''
endf

function! AutoLoadCTagsAndCScope()
    silent! execute 'cs kill -1'

    let base_dir=GetBaseDirectory()
    if !empty(base_dir)
        silent! execute 'cs add ' .base_dir . 'cscope.out'
    endif

    let ctags_dir=base_dir
    if !empty(ctags_dir)
        silent! execute 'set tags =' . ctags_dir . 'tags,'.$VIMFILES.'/tags/'.&amp;ft.'/tags'
    else
        silent! execute 'set tags ='.$VIMFILES.'/tags/'.&amp;ft.'/tags'
    endif
endf
</code></pre>

<p>  之后就可以配置让每次打开一个文件的时候都自动去项目根目录下找tags(和cscope.out)，把这个目录作为项目根目录了。</p>

<pre><code>"{ plugin -ctags 对tag的操作
set tags=tags
augroup TagGroup
    autocmd!
    "autocmd BufEnter *.* :exec 'set tags=tags,'.$VIMFILES.'/tags/'.&amp;ft.'/tags'
    autocmd BufEnter * :call AutoLoadCTagsAndCScope()
    "autocmd BufWritePost *.cpp,*.c,*.h :silent! execute "!ctags -R  -c++-kinds=+p --fields=+iaS --extra=+q ."
augroup END
"}
</code></pre>

<p>  注释掉的一行，我们放到shell中实现</p>

<pre><code>alias cr='find `pwd` -name "*.[ch]" -o -name "*.cpp" &gt; cscope.files &amp;&amp; ctags -R `pwd` --languages=c++ --c++-kinds=+px --fields=+iaKSz --extra=+q &amp;&amp; cscope -Rb &amp;&amp; rm -f cscope.files'
</code></pre>

<p>  这样在项目根目录执行一下cr来生成tags和cscope.out，这个操作同时确定了项目的根目录是哪里。至于自动更新tags，意义不是很大，而且开销有点高。</p>

<p>  最后是cscope的插件绑定，插件详见这个<a href="https://github.com/chenxiaohui/vim_cscope" title="vim_cscope - a vim plugin to configure vim_cscope">github repo</a>。配置如下：</p>

<pre><code>"{ plugin - cscopemaps.vim里面定义了键盘映射
let g:base_dir_mark = 'tags'
map &lt;silent&gt;&lt;F7&gt; :call AutoLoadCTagsAndCScope()&lt;CR&gt;
map &lt;silent&gt;&lt;C-F7&gt; :call Do_CsTag()&lt;CR&gt;
"map &lt;F3&gt; &lt;C-]&gt;
map &lt;F3&gt; :execute(":tj ".expand("&lt;cword&gt;"))&lt;cr&gt;
map &lt;m-left&gt; &lt;C-o&gt;
map &lt;m-right&gt; &lt;c-i&gt;

"map &lt;silent&gt;&lt;S-F4&gt;&lt;Esc&gt;:!ctags -R *&lt;CR&gt;
"map &lt;silent&gt;&lt;C-F4&gt;&lt;Esc&gt;:silent! execute "!ctags -R -c++-kinds=+p --fields=+iaS --extra=+q ."&lt;CR&gt;
"查找调用这个定义
"nmap &lt;C-\&gt;g :cs find g &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
"查找调用这个c符号的地方
nmap &lt;leader&gt;cf :cs find c &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
nmap &lt;leader&gt;ck :cs find s &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
nmap &lt;leader&gt;cg :cs find g &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
nmap &lt;leader&gt;ct :cs find t &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;

"查找调用这个函数的地方
"nmap &lt;C-\&gt;c :cs find c &lt;C-R&gt;=expand("&lt;cword&gt;")&lt;CR&gt;&lt;CR&gt;
"}
</code></pre>

<p>  这样就实现了在tag的跳转和查找。 Do_CsTag函数实现的功能跟shell alias基本一样。没有安装neocomplcache的可以map &lt;m-left> &lt;C-t>。效果如下所示：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/tags.png" title="自动load tags" alt="自动load tags"><p class="align-center">自动load tags</p>  <br/>
  <img class="img-polaroid center" src="http://cxh.me/images/2015/cscope.png" title="cscope find reference结果" alt="cscope find reference结果"><p class="align-center">cscope find reference结果</p></p>

<h3>Bibliography:</h3>

<blockquote><p>[1] Tagbar : Display tags of the current file ordered by scope, <a href="http://www.vim.org/scripts/script.php?script_id=3465">http://www.vim.org/scripts/script.php?script_id=3465</a></p>

<p>[2] taglist.vim : Source code browser (supports C/C++, java, perl, python, tcl, sql, php, etc) , <a href="http://www.vim.org/scripts/script.php?script_id=273">http://www.vim.org/scripts/script.php?script_id=273</a></p>

<p>[3] vim_cscope &ndash; a vim plugin to configure vim_cscope, <a href="https://github.com/chenxiaohui/vim_cscope">https://github.com/chenxiaohui/vim_cscope</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[easy_install和pip的注意事项]]></title>
    <link href="http://cxh.me/2015/03/27/notes-on-easy-install-and-pip/"/>
    <updated>2015-03-27T11:13:00+08:00</updated>
    <id>http://cxh.me/2015/03/27/notes-on-easy-install-and-pip</id>
    <content type="html"><![CDATA[<p>  关于安装目录：</p>

<pre><code>dist-packages instead of site-packages. Third party Python software installed from Debian packages goes into dist-packages, not site-packages. This is to reduce conflict between the system Python, and any from-source Python build you might install manually.

dist-packages取代了site-packages。从Debian安装包安装的第三方的Python软件 被 安装到 dist-packages,不是 site-packages.这是为了减少，系统自带python 和 你手动安装的python 之间的冲突。

不过我感觉都在site-packages下...
</code></pre>

<p>  删除包：</p>

<pre><code>pip uninstall packageName
#自动删除
easy_install -mxN packageName
#手动删除
</code></pre>

<p>  显示安装的包：</p>

<pre><code>pip list
easy_install只能去安装目录看了。实际上是共享的。
</code></pre>

<p>  另外需要注意的就是不同的Python版本下会有不同的easy_install和pip，比如easy_install3/pip3等。</p>

<pre><code>pip -V 可以显示当前pip是针对哪个Python版本的
</code></pre>

<p>  可以用virtualenv来分离不同的环境。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于ubuntu gnome下crontab运行的问题]]></title>
    <link href="http://cxh.me/2015/03/24/ubuntu-gnome-crontab/"/>
    <updated>2015-03-24T13:54:00+08:00</updated>
    <id>http://cxh.me/2015/03/24/ubuntu-gnome-crontab</id>
    <content type="html"><![CDATA[<p>  今天想在gnome下运行一个自动关机前的提示，发现crontab根本不起作用啊。以为是路径和root权限的问题，但是路径没问题，而且root的crontab必须要sudo crontab -e的，也就是说crontab还是执行在当前用户下。</p>

<p>  后来发现对图形界面程序来讲，crontab的进程需要指定输出到哪个显示的，也就是</p>

<pre><code>export DISPLAY=:0 #:0指第一个显示终端，ctrl+alt+f7那个
/usr/bin/notify-send "亲，该去运动了！！一分钟后关机，请保存所有未保存的Job."
sudo shutdown -h 1
</code></pre>

<p>  或者直接在crontab -e中指定环境变量：</p>

<pre><code>DISPLAY=:0
30 20 * * * /home/cxh/repo/scripts/shutdown.sh
</code></pre>

<p>  可以顺便制定一下其他变量</p>

<pre><code>SHELL=/bin/bash
PATH=/sbin:/bin:/usr/sbin:/usr/bin
MAILTO=cxh #如果出现错误，或者有数据输出，数据作为邮件发给这个帐号
HOME=/home/cxh #使用者运行的路径,这里是根目录
</code></pre>

<p>  crontab出错的信息会发邮件到对应用户，mail或者cat /var/mail/$USER查看。d *清理。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python2/Python3中文编码]]></title>
    <link href="http://cxh.me/2015/03/19/pythonencoding-problem-in-python2-and-python3/"/>
    <updated>2015-03-19T15:03:00+08:00</updated>
    <id>http://cxh.me/2015/03/19/pythonencoding-problem-in-python2-and-python3</id>
    <content type="html"><![CDATA[<p>  python2中需要区分另种不同形式的string，字符串和字节串（严格意义上讲，string就是字符串，字节串是bytes）。默认情况下，直接输入字符串格式为str，编码由文件编码指定，可以理解为ascii存储的某种形式，编码由编码方式决定。而python字符串是unicode内码的字符流，无论采用什么编码，长度都是由字符个数决定的，字符是最基本的操作对象。</p>

<p>  转换上，最终字符&#8221;xx&#8221;的编码由文件编码决定，u&#8221;xx&#8221;统一被转成unicode字符，对于某种编码的bytes，decode或者unicode函数把编码转成字符，对于unicode的字符，encode把字符编码为字节。</p>

<p>  命令行打印上看，字符直接打印的时候，程序会按照sys.defaultencoding编码输出字符，如果打印字节，需要保证编码跟terminal/IDE的默认编码一致。输入的时候应该不存在这个问题，terminal会按照编码sys.defaultencoding把输入转成unicode字符。</p>

<p>  python3中不存在这两种不同的编码形式了。string统一变成了unicode。略浪费。</p>

<p>  详见<a href="http://wklken.me/posts/2013/08/31/python-extra-coding-intro.html" title="PYTHON-进阶-编码处理小结">参考文献</a>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[eclipse目录结构]]></title>
    <link href="http://cxh.me/2015/03/16/eclipse-project-structure/"/>
    <updated>2015-03-16T15:32:00+08:00</updated>
    <id>http://cxh.me/2015/03/16/eclipse-project-structure</id>
    <content type="html"><![CDATA[<p>  eclipse导入Intellij的maven工程的时候经常会出现如下的情况：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/before_refresh.png"></p>

<p>  目录结构太深了，解决方法也很简单，alt+f5 refresh maven project , 目录结构会被收起：</p>

<p>  <img class="img-polaroid center" src="http://cxh.me/images/2015/after_refresh.png"></p>
]]></content>
  </entry>
  
</feed>
