<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 其他 | CXH.ME]]></title>
  <link href="http://cxh.me/category/qi-ta/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2015-05-10T16:55:58+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://cxh.me/2015/05/10/mac-multi-screen-shortcut/"/>
    <updated>2015-05-10T15:50:00+08:00</updated>
    <id>http://cxh.me/2015/05/10/mac-multi-screen-shortcut</id>
    <content type="html"><![CDATA[<p>  mac下使用多屏幕的话，经常需要把一个窗口移动到另一个窗口，windows下有快捷键win+shift+左右，linux下貌似可以通过xdotool实现，绑定一个快捷键，xdotool帮助你移动窗口到一个绝对位置。如下：</p>

<pre><code>xdotool getactivewindow windowmove 0 y windowactivate windowfocus
xdotool getactivewindow windowmove 1280 y windowactivate windowfocus
</code></pre>

<p>  mac下我们没有找到对应的系统快捷键，虽然可以一定一个zoom键来完成窗口最适化，但是没有快捷键来完成窗口的移动。这里我们通过<a href="http://manytricks.com/moom/" title="Moom">Moom</a>实现。</p>

<p>  Moom是一个窗口管理工具，安装之后只有一个配置页面，但是你会发现鼠标移动到左上角窗口最适化的按钮上的时候会弹出一个窗口管理的提示框。如下：</p>

<pre><code><img class="img-polaroid center" src="/images/2015/moom_toolip.png">
</code></pre>

<p>  然后我们配置窗口移动的功能，首先需要一个全局快捷键：</p>

<pre><code><img class="img-polaroid center" src="/images/2015/moom_shortcut.png">
</code></pre>

<p>  之后可以按下全局快捷键之后上下左右键的功能。有移动窗口，半最大化窗口，缩小放大和移动窗口到一个屏幕。</p>

<pre><code><img class="img-polaroid center" src="/images/2015/moom_config.png">
</code></pre>

<p>  这样就可以先按下全局快捷键，如下：</p>

<pre><code><img class="img-polaroid center" src="/images/2015/moom_press_shortcut.png">
</code></pre>

<p>  再通过你定义的快捷键来移动窗口了。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins 安装配置]]></title>
    <link href="http://cxh.me/2015/04/23/jenkins-setup/"/>
    <updated>2015-04-23T13:57:00+08:00</updated>
    <id>http://cxh.me/2015/04/23/jenkins-setup</id>
    <content type="html"><![CDATA[<p>   首先介绍一下Jenkins，如果你熟悉自动化构建的话，那么肯定听说过hudson。Jenkins是hudson的开发者跟Oracle撕bi之后，另立门户的一个hudson分支。当然这么说似乎不太靠谱，目前hudson已经不维护了毕竟，而Jenkins的开发社区还是很活跃的，各种插件层出不穷。总的来说，如果你不是已经习惯了hudson并且有一个能用的副本，都应该迁移到Jenkins。</p>

<p>   下面说一下如何</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[post-review编码问题]]></title>
    <link href="http://cxh.me/2015/04/22/post-review-encoding-problem/"/>
    <updated>2015-04-22T16:08:00+08:00</updated>
    <id>http://cxh.me/2015/04/22/post-review-encoding-problem</id>
    <content type="html"><![CDATA[<p>  windows下post-review遇到一个问题（不是我，不用windows）。python会报错：</p>

<pre><code>UnicodeDecodeError: 'ascii' codec can't decode byte 0xe6 in position xxx: ordinal not in range(128)     
</code></pre>

<p>  又是编码的问题啊，我不想去看post-review的源码，所以还是改默认环境的源码好了。找到rbtools\utils\process.py，import sys后面加两行：</p>

<pre><code>reload(sys)
sys.setdefaultencoding("utf-8") 
</code></pre>

<p>  Ok.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ReviewBoard客户端配置和代码review流程]]></title>
    <link href="http://cxh.me/2015/03/29/revreviewboard-specification/"/>
    <updated>2015-03-29T20:17:00+08:00</updated>
    <id>http://cxh.me/2015/03/29/revreviewboard-specification</id>
    <content type="html"><![CDATA[<h2>Postreview 客户端配置</h2>

<p>  reviewboard是群众喜闻乐见的代码review工具。本文主要涉及客户端配置和review流程，server端配置见<a href="http://cxh.me/2015/03/28/review-board-setup/" title="Reviewboard的安装">文档1</a>。</p>

<p>  首先安装python（必须的），之后安装post-review插件:</p>

<pre><code>pip:
    pip install --allow-external RBTools --allow-unverified RBTools RBTools
easy_install：
    easy_install -U RBTools
LinuxRPM:
    sudo yum install RBTools
直接安装：
    git clone git://github.com/reviewboard/rbtools.git
    cd rbtools
    python setup.py
</code></pre>

<p>  旧版的post-review有一个post-review的命令，新的只有rbt了，命令格式不太一样。</p>

<pre><code>post - Posts changes to Review Board
diff - Displays the diff that will be sent to Review Board
land - Lands a change in a local branch or on a review request
patch - Patches your tree with a change on a review request
setup-repo - Sets up RBTools to talk to your repository
</code></pre>

<p>  首先配置review board，HOME目录下简历.reviewboardrc如下：</p>

<pre><code>REVIEWBOARD_URL = 'http://10.16.10.74/'
  REPOSITORY = 'adrd-service'
</code></pre>

<p>  或者在代码目录执行rbt setup-repo，会生成上述文件。REPOSITORY原则上不配置也行。</p>

<h2>PostReview流程。</h2>

<p>　原则上git commit 之后，git push之前要提交post-review，保证代码修改相关人都知悉并ship修改才能提交。基本流程是：</p>

<pre><code>git add xx
git commit -m "message"
rbt post
</code></pre>

<p>  对同一个更改post之后如果要再次修改，可以：</p>

<pre><code>rbt post -r &lt;post_id&gt;
</code></pre>

<p>  post-id是每个post的url/r/后面的数字。post-review标题原则上按照如下规范：</p>

<pre><code>[repository_name][branch_name][NewFeature|BugFix|Refactor|Log] post-review title
</code></pre>

<p>  groups/people添加的人员原则上包括：</p>

<pre><code>1. 技术主管[mentor]
2. 合作者[partner]
2. 其他需要知悉修改的人[related]
</code></pre>

<p>  post-review旧版和svn的整合见<a href="http://cxh.me/2013/10/15/svn-vim-integration/" title="Svn Vim 整合方案">文档2</a>。
  post-review在svn和git同时托管的情况下处理冲突的方法见<a href="http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/" title="Post-review在svn和git共同存在下的冲突问题">文档3</a>。
  一个post-review的vim插件见<a href="http://cxh.me/2014/06/21/ppost-review-plugin/" title="Post-review插件">文档4</a>。</p>

<h3>Bibliography:</h3>

<blockquote><p>[1] Reviewboard的安装, <a href="http://cxh.me/2015/03/28/review-board-setup/">http://cxh.me/2015/03/28/review-board-setup/</a></p>

<p>[2] Svn Vim 整合方案, <a href="http://cxh.me/2013/10/15/svn-vim-integration/">http://cxh.me/2013/10/15/svn-vim-integration/</a></p>

<p>[3] Post-review在svn和git共同存在下的冲突问题, <a href="http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/">http://cxh.me/2013/10/11/post-review-conflict-under-git-svn/</a></p>

<p>[4] Post-review插件, <a href="http://cxh.me/2014/06/21/ppost-review-plugin/">http://cxh.me/2014/06/21/ppost-review-plugin/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[测试下CloudSight的图像识别]]></title>
    <link href="http://cxh.me/2015/03/01/test-cloudsight/"/>
    <updated>2015-03-01T20:58:00+08:00</updated>
    <id>http://cxh.me/2015/03/01/test-cloudsight</id>
    <content type="html"><![CDATA[<p>  偶然看到<a href="http://buzz.beebeeto.com/topic/45/" title="使用CloudSight API进行图像识别的Python脚本">这个</a>链接，一个识别图像并标注的，还蛮有意思。代码直接用示例里面的就可以, 需要注意两个问题：</p>

<ol>
<li> <a href="https://cloudsightapi.com/api_clients/new" title="New Project">注册一个项目</a>。ResponseType选择Product。</li>
<li> 必须上传网络链接，不能使用文件。</li>
</ol>


<p>  测试几个效果（多次返回结果不一定一样）：</p>

<ol>
<li> <a href="http://www.baidu.com/img/bdlogo.png" title="百度标识">百度首页</a>，识别为"百度标志"</li>
<li> <a href="http://ww4.sinaimg.cn/bmiddle/61d83ed4jw1epqi6itn8mj20az08caa8.jpg" title="陈吉宁校长">陈吉宁校长的头像</a>，识别为"男人的黑色西装外套" 或 &ldquo;男人的蓝色西装&rdquo;</li>
<li> <a href="http://cxh.me/images/common/baiyipiaopiao.jpg" title="背景图">我博客一张背景图</a>，识别为"女性的黑色T恤" 或 &ldquo;红色的通勤自行车&rdquo;</li>
</ol>


<p>  让我突然对这个tag算法很感兴趣。</p>
]]></content>
  </entry>
  
</feed>
