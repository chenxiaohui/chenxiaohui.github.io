<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 其他 | CXH.ME]]></title>
  <link href="http://cxh.me/category/qi-ta/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2016-06-28T15:02:23+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[迷失在时间里]]></title>
    <link href="http://cxh.me/2016/05/15/lost-in-time/"/>
    <updated>2016-05-15T23:34:00+08:00</updated>
    <id>http://cxh.me/2016/05/15/lost-in-time</id>
    <content type="html"><![CDATA[<p>   好久没写写自己心里的感受了。大概自从毕业工作之后，每天忙很多的事情，就不再有心情去体会一些事情。习惯了忙碌于工作，在这个城市的街头、地铁和公交站穿行，每天想的是五环的房价、今天有没有雾霾和路上堵不堵，只有夜深人静的时候才会想起以前的日子。</p>

<p>   想起北航的参天大树，想起以前的同学，想起清华的荷塘，想起校园里美好的日子和可爱的女生，想起晚上安静的校园和校园外的车水马龙。大学的生活确实是人生最美好的几年，让你无论什么时候回想起来都觉得心底柔软、岁月静好。</p>

<p>   有时候觉得自己迷失在时间里了。每天早晨醒来，想的都是匆匆逝去的时间和忙不完的事情。停下脚步，听见风穿过的声音，才觉得时间的洪流里面，也有这些许的温存，有难得的避风港，让灵魂停下来歇息一下。哎，我曾经是多么感性的一个人啊&hellip;</p>

<p>   物是人非。尽量不去想这些事情。每每回忆以前都觉得会触动心里的痛点，看时光匆匆流去，那些逝去的画面，变得越发模糊，而又无可奈何。于是习惯了让工作占据思想，理性太多而湮没感性，这如何又不是一种躯壳。生活节奏已经进入快车道，每每停下来的时候都会觉得不安，这偶然的感性就变得异常奢侈。</p>

<p>   入夜。这座熟悉而陌生的城市，又一次慢慢进入梦乡。同一面蓝天下的人啊，有人睡去，有人醒着，有人睡不着。窗外灯火阑珊，寂寞的人，愿你在时光中找到温暖。</p>

<p>   <img class="img-polaroid center" src="/images/2016/campus.jpg"></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[cgo实践]]></title>
    <link href="http://cxh.me/2016/04/02/cgo-practice/"/>
    <updated>2016-04-02T16:56:00+08:00</updated>
    <id>http://cxh.me/2016/04/02/cgo-practice</id>
    <content type="html"><![CDATA[<p>  工作里遇到一个问题，想把mysql的crc直接封装一下让go来调用，因为查表的crc计算性能实在是不快，对我们这种文件系统的大报文计算来看，crc容易变成瓶颈。大概性能对比如下：</p>

<pre><code>两线程crc32查表 O2优化
time_elapsed:471.474976s
total_size_m : 200000.000000M
crc rate : 424.200684m/s


两线程crc64指令 O2优化
time_elapsed:24.877853s
total_size_m : 200000.000000M
crc rate : 8039.278809m/s
</code></pre>

<p>  c这一端的计算比较容易，go的crc默认是查表， 所以存在不兼容的问题。出于兼容和性能考虑，用cgo封装一下。</p>

<p>  首先在c语言下把crc打包成lib库，考虑go的移植，直接用静态库比较好。go这边调用如下：</p>

<pre><code>package s3crc

import "unsafe"

// #include &lt;stdlib.h&gt;
// #cgo CFLAGS: -I../../../../src/lib
// #cgo LDFLAGS: -L../../../../src/lib -lcrc
// #include "s3_crc64.h"
import "C"

func s3_crc64(buf string, len int64) uint64 {
    cbuf := C.CString(buf)
    defer C.free(unsafe.Pointer(cbuf))
    return uint64(C.s3_crc64(unsafe.Pointer(cbuf), C.int64_t(len)))
}
</code></pre>

<p>  遇到的坑主要有：</p>

<ol>
<li> cgo不支持ccache，所以这个比较扯。习惯使用ccache的同学（好样的）建议export CC=gcc</li>
<li> 所有类型都需要做转换。go的类型对应到c的类型之后，都在C命名空间下。</li>
<li> 静态库路径需要指明，go的buffer映射到c下面之后，需要考虑释放的问题。参见<a href="https://golang.org/cmd/cgo/" title="Command cgo">文献</a></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[刘鹏《移动时代的营销与变现》笔记]]></title>
    <link href="http://cxh.me/2016/03/28/notes-on-liupeng-report/"/>
    <updated>2016-03-28T23:13:00+08:00</updated>
    <id>http://cxh.me/2016/03/28/notes-on-liupeng-report</id>
    <content type="html"><![CDATA[<p>  上次见刘鹏老师可能还是搜狐实习的时候，后来刘鹏走了，峰扬走了，整个团队改做推荐系统，最后又回到效果广告，算是绕了一个圈吧。买了本计算广告，更多的是给自己一个念想，念念不忘必有回响么。</p>

<p>  主要记录几个知识点或者观点：</p>

<ol>
<li><p> 竞价的历史性作用、gd广告和竞价广告的诞生原因</p>

<p>保量（guarantee delivery）广告相对于品牌广告（CPT），主要解决了流量浪费的问题，CPM的售卖方式相对增加了广告流量的利用率（比如按照性别的售卖，大致可以增加20-25%的收益）。然而保量广告相对来讲对流量的利用并不极致，大部分gd系统都面临超卖或者保守售卖的问题，可能会导致补量或者浪费，在线流量分配和优化也是个比较复杂的问题。所以才有了竞价广告，根据<a href="https://www.zhihu.com/question/19804990" title="怎样向非专业人士专业地解释「纳什均衡」？">Nash均衡</a>，广告价格是出价方博弈的结果。这样就可以让广告效益最大化，区分优质流量，同时长尾的流量也有变现的机会。</p>

<p>当然也就引入了程序化交易。程序化交易是工业化的结果，但是对于广告来讲，良莠不齐的广告对于场景融入是非常不利的。程序化交易在移动时代带来了更不好的用户体验。</p></li>
<li><p> 搜索广告的场景和精妙之处</p>

<p>搜索广告实现了两点最精巧的地方：精确判断用户意图，跟媒体内容完美融入，所以历来是兵家必争之地。</p></li>
<li><p> 移动广告、gps定位、地理位置</p>

<p>移动时代，广告不能照搬PC时代的经验。移动设备屏幕上广告的体验是很差的。移动时代对于用户意图的判断实际上是更精准了，比如可以通过GPS等判断用户所处的位置，推送更符合场景的广告。但是广告体验就更加困难了，这是有利有弊的地方。</p></li>
<li><p> O2O是潜在的广告市场</p>

<p>O2O商家是之前几乎不可能成为广告主的一个群体。O2O广告有相当的地域要求，所以对Targeting的要求更高，相对PC时代，移动时代才是O2O广告能发力的地方。智能手机的普及提供了更精准的Targeting，使这部分人群有可能成为潜在广告主。</p></li>
</ol>


<h3>Bibliography:</h3>

<p>  [1] 怎样向非专业人士专业地解释「纳什均衡」？, <a href="https://www.zhihu.com/question/19804990">https://www.zhihu.com/question/19804990</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[go生成xml的时候特殊字符转义的问题]]></title>
    <link href="http://cxh.me/2016/03/18/go-xml-escape/"/>
    <updated>2016-03-18T17:43:00+08:00</updated>
    <id>http://cxh.me/2016/03/18/go-xml-escape</id>
    <content type="html"><![CDATA[<p>  最近在做http返回的时候发现go的xml生成（marshal）会把引号转义，如下：</p>

<pre><code>    &lt;?xml version="1.0" encoding="UTF-8"?&gt;

    &lt;Part&gt;
      &lt;PartNumber&gt;1&lt;/PartNumber&gt;
      &lt;LastModified&gt;2016-03-18T08:24:25.000Z&lt;/LastModified&gt;
      &lt;ETag&gt;&amp;#34;0c78aef83f66abc1fa1e8477f296d394&amp;#34;&lt;/ETag&gt;
      &lt;Size&gt;12121&lt;/Size&gt;
    &lt;/Part&gt;     
</code></pre>

<p>  看了下源码，marshal函数的实现就会默认转义。这样就只能加一个Type，不直接用string，然后定义这个Type的marshl函数。上网搜了一下发现可以找个方法绕过去：struct的修饰可以指明当前的struct field不做转义，直接输出。</p>

<pre><code>    type Part struct {
         XMLName      xml.Name `xml:"Part"`
         PartNumber   int
         LastModified string
         ETag         string `xml:",innerxml"`
         Size         int64
    }
</code></pre>

<p>  这样可以直接在序列化的时候传自己拼成的ETag值。比如：</p>

<pre><code>     Part{PartNumber: 1,
         LastModified: S3TimeFormat(GetCurrentTime()),
         ETag:         `&lt;ETag&gt;"acbd18db4cc2f85cedef654fccc4a4d8"&lt;/ETag&gt;`,
         Size:         12121}
</code></pre>

<p>  输出结果满足要求：</p>

<pre><code>    &lt;?xml version="1.0" encoding="UTF-8"?&gt;

    &lt;Part&gt;
      &lt;PartNumber&gt;1&lt;/PartNumber&gt;
      &lt;LastModified&gt;2016-03-18T08:32:39.000Z&lt;/LastModified&gt;&lt;ETag&gt;"acbd18db4cc2f85cedef654fccc4a4d8"&lt;/ETag&gt;
      &lt;Size&gt;12121&lt;/Size&gt;
    &lt;/Part&gt;
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jenkins 安装配置]]></title>
    <link href="http://cxh.me/2015/04/23/jenkins-setup/"/>
    <updated>2015-04-23T13:57:00+08:00</updated>
    <id>http://cxh.me/2015/04/23/jenkins-setup</id>
    <content type="html"><![CDATA[<p>  首先介绍一下Jenkins，如果你熟悉自动化构建的话，那么肯定听说过hudson。Jenkins是hudson的开发者跟Oracle撕bi之后，另立门户的一个hudson分支。当然这么说似乎不太靠谱，目前hudson已经不维护了毕竟，而Jenkins的开发社区还是很活跃的，各种插件层出不穷。总的来说，如果你不是已经习惯了hudson并且有一个能用的副本，都应该迁移到Jenkins。</p>

<p>  下面说一下如何配置。</p>

<p>  Jenkins的安装非常简单，只需要从Jenkins的<a href="https://jenkins-ci.org/" title="Jenkins">主页</a>上下载最新的jenkins.war文件然后运行 java -jar jenkins.war。如果需要配置运行参数可以如下设置一些环境变量。</p>

<pre><code>JENKINS_ROOT=/home/harrychen/share/jenkins
export JENKINS_HOME=$JENKINS_ROOT/jenkins_home
java -jar $JENKINS_ROOT/jenkins.war --httpPort=8080 &gt;&gt;output.log 2&gt;&amp;1 &amp;
</code></pre>

<p>  打开对应url可以看到如下界面</p>

<!--more-->


<p>  <img class="img-polaroid center" src="/images/2015/jenkins.png"></p>

<p>  系统管理里面有一些需要配置的项，比如JDK：</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_jdk.png"></p>

<p>  GIT</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_git.png"></p>

<p>  MAVEN</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_maven.png"></p>

<p>  ssh-key</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_sshkey.png"></p>

<p>  ssh-server</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_sshserver.png"></p>

<p>  装一下slack的插件可以配置slack</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_slack.png"></p>

<p>  然后是建立项目的配置，Jenkins把每个自动发布的项目作为一个单独的配置，主要是如下几个：</p>

<p>  指定代码路径：</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_gitclone.png"></p>

<p>  部署前事件：</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_deploy_pre.png"></p>

<p>  部署后事件:</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_after_deploy.png"></p>

<p>  最后保证这些事件是在之前配置的ssh-server上执行的。</p>

<p>  <img class="img-polaroid center" src="/images/2015/jenkins_enent_server.png"></p>

<p>  细节请看<a href="http://files.cnblogs.com/files/itech/Jenkins%E5%85%A5%E9%97%A8.pdf" title="Jenkins 入门">这里</a></p>
]]></content>
  </entry>
  
</feed>
