<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 其他 | CXH.ME]]></title>
  <link href="http://cxh.me/category/qi-ta/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2015-03-28T21:25:50+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[测试下CloudSight的图像识别]]></title>
    <link href="http://cxh.me/2015/03/01/test-cloudsight/"/>
    <updated>2015-03-01T20:58:00+08:00</updated>
    <id>http://cxh.me/2015/03/01/test-cloudsight</id>
    <content type="html"><![CDATA[<p>  偶然看到<a href="http://buzz.beebeeto.com/topic/45/" title="使用CloudSight API进行图像识别的Python脚本">这个</a>链接，一个识别图像并标注的，还蛮有意思。代码直接用示例里面的就可以, 需要注意两个问题：</p>

<ol>
<li> <a href="https://cloudsightapi.com/api_clients/new" title="New Project">注册一个项目</a>。ResponseType选择Product。</li>
<li> 必须上传网络链接，不能使用文件。</li>
</ol>


<p>  测试几个效果（多次返回结果不一定一样）：</p>

<ol>
<li> <a href="http://www.baidu.com/img/bdlogo.png" title="百度标识">百度首页</a>，识别为"百度标志"</li>
<li> <a href="http://ww4.sinaimg.cn/bmiddle/61d83ed4jw1epqi6itn8mj20az08caa8.jpg" title="陈吉宁校长">陈吉宁校长的头像</a>，识别为"男人的黑色西装外套" 或 &ldquo;男人的蓝色西装&rdquo;</li>
<li> <a href="http://cxh.me/images/common/baiyipiaopiao.jpg" title="背景图">我博客一张背景图</a>，识别为"女性的黑色T恤" 或 &ldquo;红色的通勤自行车&rdquo;</li>
</ol>


<p>  让我突然对这个tag算法很感兴趣。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mac下ffmpeg的编译]]></title>
    <link href="http://cxh.me/2015/03/01/compile-ffmpeg-under-mac/"/>
    <updated>2015-03-01T11:08:00+08:00</updated>
    <id>http://cxh.me/2015/03/01/compile-ffmpeg-under-mac</id>
    <content type="html"><![CDATA[<p>  基本步骤可以看<a href="http://www.liaoxuefeng.com/article/0013738927837699a7f3407ea5f4b5caf8e1ab47997d7c5000" title="Mac OS X编译ffmpeg">这个</a>，说两个问题：</p>

<ol>
<li><p>brew的formulae没有celt这个包。忽略了算了。</p></li>
<li><p>libaacplus安装的时候，</p>

<ol>
<li>首先这个地址<code>http://217.20.164.161/~tipok/aacplus/libaacplus-2.0.2.tar.gz</code>已经失效了，从网上下载的话，这个版本还是有问题，configure的时候会卡住，一些patch丢失了好像。建议直接fork <a href="https://github.com/Distrotech/libaacplus" title="Distrotech/libaacplus">github上的</a>。</li>
<li>这个branch也有问题，frontend链接的时候会提示<code>ld: symbol(s) not found for architecture x86_64</code>，直接从Makefile.am里面把frontend去掉算了。</li>
</ol>
</li>
<li><p>可以通过brew直接安装：</p>

<pre><code> brew install ffmpeg --with-fdk-aac --with-ffplay --with-freetype --with-frei0r --with-libass --with-libvo-aacenc --with-libvorbis --with-libvpx --with-opencore-amr --with-openjpeg --with-opus --with-rtmpdump --with-schroedinger --with-speex --with-theora --with-tools
</code></pre></li>
<li><p>libav10.5之后没有avserver的安装了，虽然enable-avserver的选项还在，所以不同版本安装的卸载时候会有些残留文件。我的安装选项是：</p>

<pre><code>  --enable-libfaac --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-librtmp --enable-libschroedinger --enable-libspeex --enable-libtheora --enable-libvo-aacenc --enable-libvorbis --enable-avserver --enable-libvpx --enable-shared --enable-libx264 --enable-gpl --enable-nonfree --enable-version3 --enable-openssl --enable-gnutls --enable-zlib
</code></pre></li>
<li><p>Besides, 我发现brew可以列出configure选项，如下：</p>

<pre><code> brew options xxx
</code></pre></li>
</ol>


<p>  手动安装的话，可以通过./configure &mdash;help来查看。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[在命令行使用Shadowsocks翻墙]]></title>
    <link href="http://cxh.me/2015/01/30/use-shadowsocks-in-terminal/"/>
    <updated>2015-01-30T18:13:00+08:00</updated>
    <id>http://cxh.me/2015/01/30/use-shadowsocks-in-terminal</id>
    <content type="html"><![CDATA[<p>  拜GFW所赐，连tm boot2docker都连接不上了。好在有shadowsocks的服务，可以转成http proxy给命令行使用。</p>

<p>  首先安装<a href="http://www.privoxy.org/" title="Privoxy">privoxy</a>。Linux下直接<code>apt-get install proxy</code>，然后编辑配置文件（etc/privoxy/config)：</p>

<pre><code>forward-socks5   /               127.0.0.1:1080 .
listen-address  localhost:8118
#local network do not use proxy
forward         192.168.*.*/     .
forward            10.*.*.*/     .
forward           127.*.*.*/     .
</code></pre>

<p>  基本上上这两项就可以了。之后在shell配置下代理，详见<a href="http://cxh.me/2015/01/11/linux-proxy-setup/" title="通过搭建代理来共享网络">参考文献2</a>：</p>

<pre><code>export http_proxy='http://127.0.0.1:8118'
export https_proxy='http://127.0.0.1:8118'
</code></pre>

<p>  最后chkconfig设置下开机启动。Mac下略微麻烦一些。主要是配置开机启动。详见<a href="http://blog.devtang.com/blog/2012/12/08/use-privoxy/" title="使用Privoxy做智能代理切换">参考文献3</a>。至于Mac下的Shadowsocks，还是ShadowsocksX比较方便，跟Linux下一样，都是会在1080启动监听。</p>

<h3>Bibliography:</h3>

<blockquote><p>[1] Privoxy, <a href="http://www.privoxy.org/">http://www.privoxy.org/</a></p>

<p>[2] 通过搭建代理来共享网络, <a href="http://cxh.me/2015/01/11/linux-proxy-setup/">http://cxh.me/2015/01/11/linux-proxy-setup/</a></p>

<p>[3] 使用Privoxy做智能代理切换, <a href="http://blog.devtang.com/blog/2012/12/08/use-privoxy/">http://blog.devtang.com/blog/2012/12/08/use-privoxy/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用shadow socks翻墙]]></title>
    <link href="http://cxh.me/2015/01/26/shadow-socks-proxy/"/>
    <updated>2015-01-26T15:39:00+08:00</updated>
    <id>http://cxh.me/2015/01/26/shadow-socks-proxy</id>
    <content type="html"><![CDATA[<p>   拜GFW所赐，连tm boot2docker都连接不上了。而且最近红杏抽风，遂决定买<a href="https://portal.shadowsocks.com/aff.php?aff=483" title="shadow socks">shadowsocks</a>服务翻墙。服务直接在官网购买，90一年，比红杏略便宜一点，主要还是可控性比较大，因为是socks5的代理。</p>

<p>  <a href="https://portal.shadowsocks.com/aff.php?aff=483" title="shadow socks">这里</a>购买服务，一年99，这个优惠码可以再打一点折<code>imouto985</code>。之后进入后台可以看到分配给自己的密码，服务器主要是日本，美国和新加坡的，实测貌似日本的响应更快一点。</p>

<p>  <img class="img-polaroid center" src="/images/2015/shadow_mac.png"></p>

<p>  mac下下载了客户端直接打开配置好地址就能用，linux下需要自己配置代理。</p>

<p>  首先下载安装node.js</p>

<pre><code>wget http://nodejs.org/dist/v0.10.35/node-v0.10.35.tar.gz
tar zxvf node-v0.10.35.tar.gz 
cd node-v0.10.35
./configure &amp;&amp; make 
sudo make install
</code></pre>

<p>  然后安装npm和shadowsocks</p>

<pre><code>sudo apt-get install npm
sudo apt-get install shadowsocks
</code></pre>

<p>  apt-get安装的nodejs好像有问题，所以用源码安装。编辑配置文件，默认是<code>/usr/local/lib/node_modules/shadowsocks/config.json</code>，启动之后就可以连上服务器了。</p>

<p>  之后需要配置proxy。以chrome为例，如果之前配置过goagent的话，基本配置一样。不过proxy switch sharp终于升级到了proxy switch omega了。需要注意的是shadowsocks是socks代理，选择的时候不要选择http。gfwlist 可用如下：</p>

<pre><code>https://autoproxy-gfwlist.googlecode.com/svn/trunk/gfwlist.txt
</code></pre>

<p>  之后就可以翻墙了。最后说一句：<strong>Fxxk GFW，祝病魔早日战胜方校长，所有参与GFW的人都将钉在历史的耻辱柱上</strong>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git中删除已经缓存的文件]]></title>
    <link href="http://cxh.me/2015/01/04/del-cached-files-in-git/"/>
    <updated>2015-01-04T16:49:00+08:00</updated>
    <id>http://cxh.me/2015/01/04/del-cached-files-in-git</id>
    <content type="html"><![CDATA[<p>  经常遇到一种情况，开始项目的时候没加.gitignore文件，提交之后发现有大量的pyc文件残留，这样两地共同修改的时候pyc文件会造成大量的冲突。针对这种情况，可以如下解决：</p>

<ol>
<li><p> 建立.gitignore文件并写入：</p>

<pre><code>.pyc
.swp
</code></pre></li>
<li><p> 删除所有缓存中的数据：</p>

<pre><code>find . -name '*.pyc' -o -name '*.swp' &gt; /tmp/files
while read line; do
    git rm --cached $line
done &lt; /tmp/files
</code></pre></li>
<li><p> 在冲突的一端回滚所有pyc冲突：</p>

<pre><code>find . -name '*.pyc' -o -name '*.swp' &gt; /tmp/files
while read line; do
    git checkout -f  $line
done &lt; /tmp/files
</code></pre></li>
<li><p> 冲突的一端更新修改：</p>

<pre><code>git pull origin
</code></pre></li>
</ol>


<p>  补充：</p>

<p>  蛋疼了&hellip;直接这样就行了</p>

<pre><code>git rm --cached `find . -name '*.pyc' -o -name '*.swp'`

或者 find . -name '*.pyc' -o -name '*.swp' -exec git rm --cached {} \; 
</code></pre>

<p>  忘了这些命令都接受多个参数&hellip;.</p>
]]></content>
  </entry>
  
</feed>
