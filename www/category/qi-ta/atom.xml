<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 其他 | CXH.ME]]></title>
  <link href="http://cxh.me/category/qi-ta/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2014-06-28T13:44:28+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[]]></title>
    <link href="http://cxh.me/2014/06/28/gitsync-github-gitcafe/"/>
    <updated>2014-06-28T12:41:00+08:00</updated>
    <id>http://cxh.me/2014/06/28/gitsync-github-gitcafe</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[git远程分支和配置文件详解]]></title>
    <link href="http://cxh.me/2014/06/28/git-remote-branch/"/>
    <updated>2014-06-28T11:14:00+08:00</updated>
    <id>http://cxh.me/2014/06/28/git-remote-branch</id>
    <content type="html"><![CDATA[<p>  最近同时同步博客到github和gitcafe上，遇到一些问题，我们分如下几个方面来分析一下：</p>

<h3>推送远程分支到同一个服务器</h3>

<p>  比如首先建立git服务器，顺便clone出两个副本</p>

<pre><code>mkdir server
cd server
git init --bare
cd ..
git clone server git1
git clone server git2
</code></pre>

<p>  目前git branch是空的。我们提交一点东西建立master分支。</p>

<pre><code>cd git1
touch a.txt
git add .
git commit -m "init"
git push origin master
</code></pre>

<p>  现在git branch -a 显示:</p>

<pre><code>* master
  remotes/origin/master
</code></pre>

<p>  当前系统处于master分支，远程origin的repository上也有一个master分支。两个是tracking的。我们切到git2下面</p>

<pre><code>cd ../git2
git pull origin
</code></pre>

<p>  这时候git2跟git1完全同步了。现在我们开始尝试建立另一个分支并推送到服务器。习惯的，我们还是切回git1</p>

<pre><code>cd ../git1
git checkout -b source
</code></pre>

<p>  这时候我们已经有了一个本地分支了，如果这个分支不需要共享，那么你可以一直在这个分支上commit但是不push到服务器，直到这个分支被合并回主分支或者丢弃。git branch 显示如下：</p>

<pre><code>  master
* source
</code></pre>

<p>  我们最终决定把这个分支push到服务器上与其他人共享，如下：</p>

<pre><code>git push origin source:source
</code></pre>

<p>  这时候git branch -a 能看到当前repository里面所有的分支，包括两个本地的，两个远程的，本地和远程的都处于tracking状态。</p>

<pre><code>  master
* source
  remotes/origin/master
  remotes/origin/source
</code></pre>

<p>  切到另一个副本。</p>

<pre><code>cd ../git2
git pull origin
</code></pre>

<p>  显示如下：</p>

<pre><code> * [新分支]          source      -&gt; origin/source
</code></pre>

<p>  git branch -a显示本地已经有了一个远程分支的指针，但是没有tracking这个分支的本地分支：</p>

<pre><code>* master
  remotes/origin/master
  remotes/origin/source
</code></pre>

<p>  同样我们可以在.git/refs/remotes/origin下看到分支的名字，但是refs/heads下面并没有。我们来检出这个远程分支：</p>

<pre><code>git checkout -b source origin/source
</code></pre>

<p>  这时候git branch -a 显示就跟git1一致了。git2下也可以编辑source分支并同步。这些都是比较常见的操作，我们需要注意的是，多分支下默认的参数。比如，在两个分支都修改一点东西：</p>

<pre><code>cd ../git1
git checkout master
//modify 
git add .
git commit -m "master modify"
git checkout source
//modify
git add .
git commit -m "source modify"
</code></pre>

<p>  这时候git push origin 是针对当前分支的，所以两个分支同时push更新只能</p>

<pre><code>git push origin
git checkout master
git push origin
</code></pre>

<p>  pull更新的时候</p>

<pre><code>cd ../git2
git checkout master
git pull origin
</code></pre>

<p>  这会同时更新两个分支的指针，但是不会merge另一个分支，我们去另一个分支下</p>

<pre><code>git checkout source
git pull origin
</code></pre>

<p>  但是出错如下：</p>

<pre><code>You asked to pull from the remote 'origin', but did not specify
a branch. Because this is not the default configured remote
for your current branch, you must specify a branch on the command line.
</code></pre>

<p>  问题在于没有给当前分支配置merge的路径，git不知道去merge哪个分支。（～～虽然我觉得既然是tracking的不应该不知道啊～）。</p>

<p>  如果你有 1.6.2 以上版本的 Git，&mdash;track 选项可以同时配置merge的路径：</p>

<pre><code>git checkout --track origin/serverfix
</code></pre>

<p>  这里我们修改配置文件加入branch &ldquo;source"：</p>

<pre><code>[core]
    repositoryformatversion = 0
    filemode = false
    bare = false
    logallrefupdates = true
[remote "origin"]
    url = /media/cxh/backup/work/ceshi/git/server
    fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
    remote = origin
    merge = refs/heads/master
[branch "source"]
    remote = origin
    merge = refs/heads/source
</code></pre>

<p>  这意味着每次fetch origin的时候更新所有remotes/origin的头指针到refs/heads/下面，具体可以去.git下查阅这个目录，但是头指针都是只读的。merge是由所在branch定义的。我们加了branch &ldquo;source"的配置指定当前source的merge策略是使用refs/heads/source来合并到当前分支。这样就可以顺利的git pull origin了。</p>

<h3>推送远程分支到不同服务器</h3>

<h3>总结一下</h3>

<ul>
<li>update

<ul>
<li>fetch操作的本质是更新repo所指定远程分支的头指针(server->refs/remotes/xxx/)</li>
<li>merge操作的本质是合并当前分支和指定的头指针(refs/remotes/xxx->refs/heads)</li>
<li>pull操作的本质是fetch + merge</li>
</ul>
</li>
<li>commit

<ul>
<li>commit的本质是修改了当前分支的头指针(refs/heads)</li>
<li>push操作本质是提交当前分支头指针到server，顺便也修改了本地存储的server头指针(refs/remotes/xxx)</li>
</ul>
</li>
<li>checkout

<ul>
<li>复制本地分支的本质是拷贝了refs/heads/下的一个头指针</li>
<li>push本地分支到server的本质是把这个头指针上传服务器，顺便拷贝了本地存储的server头指针（refs/remotes/xxx)</li>
<li>tracking远程分支的本质是把refs/remotes/下的指针拷贝到了refs/heads下</li>
</ul>
</li>
</ul>


<blockquote><p>注：以上过程都没有涉及数据流。</p></blockquote>

<h3>参考文献:</h3>

<blockquote><p>[1] Git 分支 &ndash; 远程分支, <a href="http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF">http://git-scm.com/book/zh/Git-%E5%88%86%E6%94%AF-%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[用树莓派和DS18B20监控温度变化]]></title>
    <link href="http://cxh.me/2014/05/25/pi-temperature-sensor/"/>
    <updated>2014-05-25T14:16:00+08:00</updated>
    <id>http://cxh.me/2014/05/25/pi-temperature-sensor</id>
    <content type="html"><![CDATA[<p>  基本的教程在这里:</p>

<blockquote><ol>
<li><a href="http://wemaker.cc/60" title="树莓派GPIO引脚详解">引脚定义</a></li>
<li> <a href="http://s.mile77.com/?p=2039" title="树莓派+多个DS18B20+Yeelink，全天候监测多个点的温度">传感器教程1</a></li>
<li> <a href="http://blog.sina.com.cn/s/blog_3cb6a78c0101a46w.html" title="Raspberry Pi 使用DS18B20温度传感器">传感器教程2</a></li>
</ol>
</blockquote>

<p>  鉴于我的硬件水平只限于插板子焊板子和对针脚，其他的都还给数电模电老师了，我还是老老实实买了模块，省的自己焊电阻。
芯片，模块都是淘宝买的，随便搜一家就行，几块钱的东西一般不会有假的。</p>

<p>  整个过程可以按照教程1，2 对应针脚完成，如果顺利基本一次成功。别人的知识产权我就不好摘录了。但是代码我优化了一下，硬件工程师的代码果然是写的异常粗犷。修改后的代码如下：</p>

<pre><code>#!/usr/bin/python
#coding=utf-8
#Filename:temperature.py
import os,datetime,time

def calc_temperature(filename):
    res = 0
    valid_count = 0
    for i in range(0,5):
        with open(filename) as tfile:
            text = tfile.read()
        lines = text.split("\n")
        firstline, secondline = lines[0], lines[1]
        crc = firstline.split(" ")[11]
        if crc == 'YES':
            temperaturedata = secondline.split(" ")[9]
            temperature = float(temperaturedata[2:])
            temperature = temperature / 1000
            valid_count += 1
            res += temperature
            print temperature
        else:
            with open(os.path.expanduser("~/sys.log"), "a") as err:
                err.write("CRC Error: %s\n%s\n" % (datetime.datetime.now().strftime("%Y/%M/%d-%H:%M:%S"), text))
        time.sleep(0.2)
    return res/valid_count if valid_count &gt; 0 else -1

#temperature = calc_temperature("input.txt")
temperature = calc_temperature("/sys/bus/w1/devices/28-000005e31fe6/w1_slave")
if temperature &gt; 0:
    res = '{"value":%f}' %temperature
    with open(os.path.expanduser('~/datafile.txt'), 'w') as output:
        output.write(res)
</code></pre>

<!--more-->


<p>  上传的脚本依然可以用教程里面的。Yeelink居然是一家青岛的公司，感慨省里总算有点互联网的公司了，当然网站做的是挺粗糙的。Yeelink的android手机端一直提示我登录密码出错。重置了也不行。后来发现登陆的时候不是邮箱&hellip;那你网站干嘛又能用邮箱登陆我擦&hellip;.</p>

<p>  温度曲线的图片如下：</p>

<p>  <img class="img-polaroid center" src="/images/2014/before.png" title="&ldquo;温度曲线&rdquo; &ldquo;温度曲线&rdquo;" ></p>

<p>  开始的程序没有考虑求平均，不知道会不会有临时跳变的瞬间值。后来加了平均值之后发现多次取的结果是不一样，但是不清楚这个芯片采集的周期是多少。多次平均的结果如下所示：</p>

<p>  <img class="img-polaroid center" src="/images/2014/data.png" title="&ldquo;多次平均的结果&rdquo; &ldquo;多次平均的结果&rdquo;" ></p>

<p>  ps: 公司周末真热&hellip;.</p>

<h3>参考文献:</h3>

<blockquote><p>[1] 树莓派GPIO引脚详解, <a href="http://wemaker.cc/60">http://wemaker.cc/60</a></p>

<p>[2] 树莓派+多个DS18B20+Yeelink，全天候监测多个点的温度, <a href="http://s.mile77.com/?p=2039">http://s.mile77.com/?p=2039</a></p>

<p>[3] Raspberry Pi 使用DS18B20温度传感器, <a href="http://blog.sina.com.cn/s/blog_3cb6a78c0101a46w.html">http://blog.sina.com.cn/s/blog_3cb6a78c0101a46w.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Thinking In Java读书笔记]]></title>
    <link href="http://cxh.me/2013/11/24/thinking-in-java-notes/"/>
    <updated>2013-11-24T20:32:00+08:00</updated>
    <id>http://cxh.me/2013/11/24/thinking-in-java-notes</id>
    <content type="html"><![CDATA[<p>  静态成员只有被引用（首次生成所在类的对象或者被首次访问，即使从为生成过那个类的对象）的时候才会初始化。</p>

<p>  一般情况下Java成员变量初始化顺序是，静态成员/静态快->直接初始化的类成员->构造函数</p>

<p>  一个简单的例子如下:</p>

<!-- more -->


<p>  <strong>Cup.java</strong></p>

<pre><code>public class Cup {
    public Cup(int i)
    {
        System.out.println("constructor" + i);
    }
}
</code></pre>

<p>  <strong>TestJava.java</strong></p>

<pre><code>public class TestJava {
    public Cup cup;
    public Cup cup3 = new Cup(3);
    public static Cup cup1 = new Cup(1);
    public static Cup cup2;
    static{
        cup2 = new Cup(2);
    }
    public TestJava(){
        cup = new Cup(0);
    }
    public static void main(String[] args) {
        new TestJava();
    }
}
</code></pre>

<p>  <strong>执行结果是</strong></p>

<pre><code>constructor1
constructor2
constructor3
constructor0
</code></pre>
]]></content>
  </entry>
  
</feed>
