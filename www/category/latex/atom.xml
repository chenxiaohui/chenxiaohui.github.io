<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Latex | CXH.ME]]></title>
  <link href="http://cxh.me/category/latex/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2014-06-26T11:39:35+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[直接从markdown生成各种电子书]]></title>
    <link href="http://cxh.me/2014/06/21/generate-several-types-using-pandoc/"/>
    <updated>2014-06-21T21:23:00+08:00</updated>
    <id>http://cxh.me/2014/06/21/generate-several-types-using-pandoc</id>
    <content type="html"><![CDATA[<p>  有时候我们需要把编辑的markdown转成各种格式，这不失为一种写书的方式。借助pandoc这把瑞士军刀，我们可以实现一个脚本编译各种格式的功能，代码如下：</p>

<pre><code>#!/usr/bin/python
#coding=utf-8
#Filename:build.py
import glob,os,sys,shutil

cmd_template={'html':"pandoc %s -o output/html/%s.html --template=default.html",
              'pdf':'pandoc -N --toc --template=default.latex --latex-engine=xelatex %s -o output/pdf/%s.pdf',
              'beamer': 'pandoc -N -t beamer --toc --template=default.beamer --latex-engine=xelatex %s -o output/beamer/%s.pdf',
              'epub': 'pandoc %s -o output/epub/%s.epub'
             }

if __name__ == '__main__':
    if len(sys.argv) &gt; 2:
        print 'Usage: build.py [pdf|html|epub|beamer]'
    else:
        out_type = 'html' if len(sys.argv) == 1 else sys.argv[1]
        assert(out_type in cmd_template)

    os.system('cat *.md &gt; swift_book.mkd')
    cmd = [os.system(cmd_template[out_type] %(path, os.path.splitext(path)[0])) for path in glob.glob("*.md")]
    cmd += [os.system(cmd_template[out_type] %('swift_book.mkd', 'swift_book'))]
    print cmd

    if out_type == 'html':
        try:
            shutil.rmtree('output/html/pic')
        except Exception , e:
            pass
        shutil.copytree("pic",'output/html/pic')
</code></pre>

<!--more-->


<p>  为此你需要<a href="http://johnmacfarlane.net/pandoc/installing.html" title="pandoc">安装一下pandoc</a>，需要pdf支持的话还需要<a href="https://www.tug.org/texlive/" title="texlive">装一下texlive</a>，用法如下：</p>

<pre><code>build.py [pdf|html|epub|beamer]

需要如下的目录结构：

    output  - beamer
            - pdf
            - epub
            - html
                - pic
</code></pre>

<p>   另外，脚本会拼一份合集在目录下，所以需要markdown文件有序，比如9.md会拼在10.md后面，所以需要9.md改名为09.md。</p>

<p>  一个使用的例子可以看<a href="https://github.com/letsswift/The-Swift-Programming-Language-in-Chinese" title="The-Swift-Programming-Language-in-Chinese">这里</a>。那些template都是模板文件，可以参考上面例子里的。</p>

<h3>参考文献:</h3>

<blockquote><p>[1] The-Swift-Programming-Language-in-Chinese, <a href="https://github.com/letsswift/The-Swift-Programming-Language-in-Chinese">https://github.com/letsswift/The-Swift-Programming-Language-in-Chinese</a></p>

<p>[2] pandoc, <a href="http://johnmacfarlane.net/pandoc/">http://johnmacfarlane.net/pandoc/</a></p>

<p>[3] pandoc, <a href="http://johnmacfarlane.net/pandoc/installing.html">http://johnmacfarlane.net/pandoc/installing.html</a></p>

<p>[4] texlive, <a href="https://www.tug.org/texlive/">https://www.tug.org/texlive/</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[解决Latex中Itemize距离过大的问题]]></title>
    <link href="http://cxh.me/2012/03/16/solve-the-problem-of-too-large-space-between-itemize-in-Latex/"/>
    <updated>2012-03-16T00:00:00+08:00</updated>
    <id>http://cxh.me/2012/03/16/solve-the-problem-of-too-large-space-between-itemize-in-Latex</id>
    <content type="html"><![CDATA[<p>  默认的itemize存在行距过大的问题，大概是如下的样子：</p>

<p><img src="http://www.roybit.com/wp-content/uploads/2012/03/image_thumb2.png" title="image" alt="image" /></p>

<p>  用paralist包可以减少行距，代码如下</p>

<blockquote><p>\usepackage{paralist}
\let\itemize</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[两种可行的Latex中文生成方式(GBK/UTF8)]]></title>
    <link href="http://cxh.me/2012/03/15/two-ways-to-generate-chinese-in-Latex/"/>
    <updated>2012-03-15T00:00:00+08:00</updated>
    <id>http://cxh.me/2012/03/15/two-ways-to-generate-chinese-in-Latex</id>
    <content type="html"><![CDATA[<h1></h1>

<p>  本来想总结一下Latex里各种中文排版支持，但是发现太乱了，CCT，CJK，CTEX神马的，还有GBK和UTF8下的不同编码方式，再加上XeLatex这样来搅局的……所以最后决定只给出一种可行的排版方式，测试环境是Windows CTex2.8。</p>

<p>  ps:每天忍辱负重的在Windows下用Vim和Latex……</p>

<p>  第一种是gbk编码下的编译方式</p>

<pre><code>REM taskkill /im AcroRd32.exe
pdflatex %1
bibtex %1
pdflatex %1
gbk2uni %1.out
pdflatex %1
start %1.pdf
</code></pre>

<p>  其中第一句的目的是结束掉当前的PDF文档，但是它会随机选择一个Acrobat Reader进程结束，所以给注掉了。从代码里可以看出，需要执行多遍pdflatex，同时穿插bibtex生成参考文件，gbk2uni的作用是将gbk转成unicode，这个命令是cct里的，请确保你的环境变量中有cct的bin目录。</p>

<p>  测试article代码如下：</p>

<pre><code>\documentclass{article}
\usepackage{CJK}
\usepackage{cite}
ewcommand{\upcite}[1]{ extsuperscript{ extsuperscript{
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Latex中使用visio的矢量图(转载+修改）]]></title>
    <link href="http://cxh.me/2012/03/14/using-visio-vector-diagram-in-Latex/"/>
    <updated>2012-03-14T00:00:00+08:00</updated>
    <id>http://cxh.me/2012/03/14/using-visio-vector-diagram-in-Latex</id>
    <content type="html"><![CDATA[<h1></h1>

<p>  我们知道，visio用来画流程图等专业图很方便，而Latex的专业排版效果是Word所不能比的，而Visio不支持导入eps和dvi格式的矢量图，而导出jpeg毕竟有质量损失，那么怎么才能在Latex中直接使用visio导出的矢量图呢？</p>

<p>1. Visio可以保存为wmf，emf等矢量图形格式（word的默认插图格式），再转换为eps格式（可使用TpX，由本论坛得知早期版本貌似可直接保存eps）插入LaTeX。可转换后的eps图片格式不稳定，图形易错位；另外Visio使用Windows字体，转换后的eps图形只引用而不包含字体，插入LaTex后由于找不到对应字体，中文（或mathtype公式，特殊符号）会乱码。
2. 用ps虚拟打印的方式虽然可以解决格式和乱码问题，但中文字符（或其他不支持的内容）会按位图处理，得不到完美的矢量图形。</p>

<p>  经过探索，将visio保存为pdf格式是最完美的解决方式，因为pdf文件保存了所有格式和字体信息。借助pdfcrop和ebb程序，调用graphicx宏包插入pdf格式图片，能够得到完美的visio矢量图形。</p>

<p>注：
1.导入的代码依然可以使用标准的fig标签，例如：
egin{figure}</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Latex里图片与表格标题与正文距离的调整]]></title>
    <link href="http://cxh.me/2012/03/14/ajust-distance-between-table-title-and-content-in-Latex/"/>
    <updated>2012-03-14T00:00:00+08:00</updated>
    <id>http://cxh.me/2012/03/14/ajust-distance-between-table-title-and-content-in-Latex</id>
    <content type="html"><![CDATA[<p>  首先，我们这里的图表用的分别是figure和table标签，宏包应该是graphicx和??，我们需要调整的距离是其标题(caption)的前后的空白，比如下面图中所示：</p>

<p><img src="http://www.roybit.com/wp-content/uploads/2012/03/image_thumb.png" title="image" alt="image" /></p>

<p>  首先，我们可以通过如下代码设置这个距离，above设置标题上面的距离，below设置标题下面的距离。</p>

<blockquote><p>\setlength{bovecaptionskip}{10pt}
\setlength{elowcaptionskip}{-10pt}</p></blockquote>

<p>  需要特别说明的是一点，网上好像都没有人说这个事情。如果标题在图标的上面的话，这两个距离是反的，这点让人觉得很不适应。</p>

<p><img src="http://www.roybit.com/wp-content/uploads/2012/03/image_thumb1.png" title="image" alt="image" /></p>

<p>参考文献：</p>
]]></content>
  </entry>
  
</feed>
