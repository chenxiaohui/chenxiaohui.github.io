<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | CXH.ME]]></title>
  <link href="http://cxh.me/category/linux/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2015-03-16T15:35:29+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[关于Linux 安装和卸载tar ball形式的程序]]></title>
    <link href="http://cxh.me/2015/03/16/linux-install-uninstall-tar-ball/"/>
    <updated>2015-03-16T12:11:00+08:00</updated>
    <id>http://cxh.me/2015/03/16/linux-install-uninstall-tar-ball</id>
    <content type="html"><![CDATA[<p>  源码安装的一些NOTE:</p>

<ol>
<li>首先./configure &mdash;helps是可以看到所有编译选项的。</li>
<li>centos下，<code>yum install xx.rpm</code>，可以安装依赖，ubuntu下：<code>apt-get build-dep xx</code></li>
<li>zsh下，./configure tab是会提示所有的编译选项的。</li>
<li><p>Makefile如果没有uninstall选项，更合理的办法似乎是：</p>

<ol>
<li><p>先install到一个单独目录：</p>

<p> find . -exec rm 安装目录/{} \;</p></li>
</ol>


<p> 文件夹自然会失败。</p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[centos下编译ffmpeg]]></title>
    <link href="http://cxh.me/2015/03/13/centos-compilecentos-compile-ffmpeg/"/>
    <updated>2015-03-13T11:27:00+08:00</updated>
    <id>http://cxh.me/2015/03/13/centos-compilecentos-compile-ffmpeg</id>
    <content type="html"><![CDATA[<p>  先安装能通过yum直接安装的</p>

<pre><code>yum install autoconf automake gcc gcc-c++ git libtool make nasm pkgconfig wget zlib-devel
yum install yasm SDL SDL-devel dirac dirac-devel gsm gsm-devel libvpx libvpx-devel gnutls gnutls-devel freetype freetype-devel openjpeg openjpeg-devel opus opus-devel
</code></pre>

<p>  剩下lame lame-devel libvpxlame-devel xvidcore xvidcore-devel faac faac-devel opencore-amr opencore-amr-devel faad2 a52dec libfaac 手动安装</p>

<!--more-->


<p>  安装libfaac</p>

<pre><code>wget http://downloads.sourceforge.net/project/faac/faac-src/faac-1.28/faac-1.28.tar.gz
  tar xvfz faac-1.28.tar.gz
  cd faac-1.28/
  修改源码：
  ./bootstrap
  ./configure --prefix=$HOME --enable-shared
  make
  make install
</code></pre>

<p>  安装libfdk_aac</p>

<pre><code>wget http://jaist.dl.sourceforge.net/project/opencore-amr/fdk-aac/fdk-aac-0.1.4.tar.gz
tar zxvf fdk-aac-0.1.4.tar.gz
cd fdk-aac-0.1.4
./autogen.sh
./configure --prefix=$HOME --enable-shared
  make
  make install
</code></pre>

<p>  安装mp3lame</p>

<pre><code>wget http://jaist.dl.sourceforge.net/project/lame/lame/3.99/lame-3.99.5.tar.gz
tar zxvf lame-3.99.5.tar.gz
cd lame-3.99.5.tar.gz
./configure --prefix=$HOME --enable-shared
  make
  make install  
</code></pre>

<p>  安装opencore-amr</p>

<pre><code>wget http://jaist.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.3.tar.gz
tar zxvf opencore-amr-0.1.3.tar.gz
cd opencore-amr-0.1.3
./configure --prefix=$HOME --enable-shared
  make
  make install  
</code></pre>

<p>  安装 vo_aacenc</p>

<pre><code>wget http://heanet.dl.sourceforge.net/project/opencore-amr/vo-aacenc/vo-aacenc-0.1.3.tar.gz
  tar zxvf vo-aacenc-0.1.3.tar.gz
  cd vo-aacenc-0.1.3
  ./configure --prefix=$HOME --enable-shared
  make
  make install
</code></pre>

<p>  安装libx264</p>

<pre><code>git clone git://git.videolan.org/x264.git
cd x264
  ./configure --prefix=$HOME --enable-shared
  make 
  make install
</code></pre>

<p>  安装ffmpeg</p>

<pre><code>git clone git://source.ffmpeg.org/ffmpeg.git ffmpeg
cd ffmpeg
./configure --prefix=$HOME --enable-libfaac --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libvo-aacenc --enable-libvorbis --enable-libvpx --enable-shared --enable-libx264 --enable-gpl --enable-nonfree --enable-version3 --enable-openssl --enable-gnutls --enable-zlib --extra-cflags="-I $HOME/include" --extra-ldflags="-L $HOME/lib"
make 
make install
</code></pre>

<p>  安装libav</p>

<pre><code>wget https://libav.org/releases/libav-11.2.tar.gz
tar zxvf libav-11.2.tar.gz
cd libav-11.2
export PKG_CONFIG_PATH=$HOME/lib/pkgconfig
./configure --prefix=$HOME --enable-libfaac --enable-libfdk-aac --enable-libfreetype --enable-libmp3lame --enable-libopencore-amrnb --enable-libopencore-amrwb --enable-libopenjpeg --enable-libopus --enable-libvo-aacenc --enable-libvorbis --enable-libvpx --enable-shared --enable-libx264 --enable-gpl --enable-nonfree --enable-version3 --enable-openssl --enable-gnutls --enable-zlib --extra-cflags="-I $HOME/include" --extra-ldflags="-L $HOME/lib"
make 
make install
</code></pre>

<p>  安装mplayer，只用来编解码，不需要界面</p>

<pre><code>./configure --prefix=$HOME --disable-gui --codecsdir=DIR
</code></pre>

<p>  去掉了一些不用的：</p>

<pre><code>--enable-rtmp --enable-libschroedinger   --enable-libspeex --enable-libtheora
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[登录非登录shell和sudo的环境变量]]></title>
    <link href="http://cxh.me/2015/03/08/env-with-login-non-login-shell-and-sudo/"/>
    <updated>2015-03-08T21:21:00+08:00</updated>
    <id>http://cxh.me/2015/03/08/env-with-login-non-login-shell-and-sudo</id>
    <content type="html"><![CDATA[<p>  关于登陆/非登录/交互/非交互shell的问题见<a href="http://blog.csdn.net/trochiluses/article/details/13767669" title=" bash 深入理解：交互式shell和非交互式shell、登录shell和非登录shell的区别">参考文献1</a>。今天遇到的问题是su/sudo的时候环境变量到底是怎么样的，执行了什么rc文件。</p>

<ol>
<li> sudo命令是以root的身份执行command命令，但是环境变量还是当前用户的，执行目录也仍然是当前目录
即环境变量和执行目录都不会切换到root</li>
<li> su &ndash; 命令是切换到另一个用户，环境变量会切换到username，执行目录会切换到目标用户username的家目录</li>
<li> su 命令仅切换用户身份，例如从A切换到B，执行whoami命令，显示的是用户B，但当前目录不会切换，
环境变量也仍未切换，仍为A用户的环境变量</li>
<li> sudo su 只是用sudo的权限来执行su命令，跟su本身一样。</li>
<li><p> visudo可以配置sudo的继承环境变量</p>

<p>Defaults    env_keep =  &ldquo;COLORS DISPLAY HOSTNAME HISTSIZE INPUTRC KDEDIR LS_COLORS JAVA_HOME PATH&rdquo;</p></li>
</ol>


<h3>Bibliography:</h3>

<blockquote><p>[1]  bash 深入理解：交互式shell和非交互式shell、登录shell和非登录shell的区别, <a href="http://blog.csdn.net/trochiluses/article/details/13767669">http://blog.csdn.net/trochiluses/article/details/13767669</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux ssh免密登陆和调试]]></title>
    <link href="http://cxh.me/2015/03/07/ssh-debug-and-passless-login/"/>
    <updated>2015-03-07T17:56:00+08:00</updated>
    <id>http://cxh.me/2015/03/07/ssh-debug-and-passless-login</id>
    <content type="html"><![CDATA[<p>   把一个公钥上传到服务器配置了免密登陆，ok之后再配置几台服务器之间的免密，发现不成功。尝试了如下几种定位方法：</p>

<ol>
<li>ssh目录权限。修改成.ssh 700，下面文件600。解决了一个的问题。其他几台还是不行。</li>
<li>查看sshd_config是否允许公钥登陆。看来不是这个问题。</li>
<li>ssh -v 看调试信息，发现尝试过publickey但是验证未通过。手动比对ssh 公钥发现无误。</li>
<li><p>搜索错误信息：Offering public key: /root/.ssh/id_rsa，有人说<a href="http://segmentfault.com/q/1010000000445726" title="CentOS SSH公钥登录问题">是因为.ssh目录没有ssh_home_t标签</a>， 通过这个命令查看文件夹或文件的标签</p>

<pre><code>[root@localhost ~]# ls -laZ
</code></pre>

<p>通过</p>

<pre><code>restorecon -r -vv /root/.ssh
</code></pre>

<p>来重置标签，但是没起作用。</p></li>
<li><p>设想可能是手动建立.ssh目录的问题，删除.ssh，通过ssh-keygen本地生成密钥并建立目录。问题解决。</p></li>
</ol>


<p>   补充一点细节。bash下似乎单行的function必须以分号结尾，我说怎么server登陆总报error end line xxx..</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sudo的环境变量]]></title>
    <link href="http://cxh.me/2015/03/03/sudo-env/"/>
    <updated>2015-03-03T18:34:00+08:00</updated>
    <id>http://cxh.me/2015/03/03/sudo-env</id>
    <content type="html"><![CDATA[<p>  sudo的时候不会加载.bashrc什么的，今天就遇到了一个比较扯的问题。在home下安装了高版本的vim，bashrc里面PATH是home高于/bin的，但sudo vi的时候会调用系统的。尝试如下方式：</p>

<ol>
<li> 修改其他配置如.profile什么的。比较麻烦。</li>
<li> 修改sudoers里面env_keep，发现还是不起作用。</li>
<li><p> 修改sudoers里面secure_path，如下：</p>

<pre><code>Defaults    secure_path = /root/bin:/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin
</code></pre></li>
</ol>


<p>  OK。</p>
]]></content>
  </entry>
  
</feed>
