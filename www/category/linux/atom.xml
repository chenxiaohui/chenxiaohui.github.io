<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Linux | CXH.ME]]></title>
  <link href="http://cxh.me/category/linux/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2015-01-27T16:07:31+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[bash下模拟group by功能]]></title>
    <link href="http://cxh.me/2015/01/22/simulate-group-by-in-bash/"/>
    <updated>2015-01-22T15:56:00+08:00</updated>
    <id>http://cxh.me/2015/01/22/simulate-group-by-in-bash</id>
    <content type="html"><![CDATA[<p>  遇到这样一个问题：有一堆数据，需要统计相同key下相同的column的重复出现次数，实际上就是数据库里面的group by功能，但是建表导入然后计算未免麻烦，何况数据是临时数据，导入计算完毕之后就不需要了。这里用shell下的一些命令来完成。</p>

<p>  数据格式</p>

<pre><code>user            tag_id  type        time
AAAAAAAAAAA     tag1    Click       2015:13:37:16
AAAAAAAAAAA     tag1    Click       2015:13:37:16
AAAAAAAAAAA     tag2    Click       2015:13:37:16
BBBBBBBBBBB     tag2    Click       2015:13:37:16
BBBBBBBBBBB     tag2    Click       2015:13:37:16
BBBBBBBBBBB     tag2    EXPOSURE    2015:13:37:16
</code></pre>

<p>  目的：</p>

<pre><code>统计同一个用户下，同一个tag的点击次数：
</code></pre>

<p>  实现如下：</p>

<ol>
<li><p> 排序</p>

<p>首先对数据进行排序。这是最基本的，见<a href="http://cxh.me/2015/01/22/sort-using-multiple-columns/" title="Sort多列排序">上篇文章</a>。</p>

<pre><code>sort -k 1 
</code></pre></li>
<li><p> 过滤不需要的行和列。</p>

<pre><code>awk '{print $1, $2, $3}' |grep "Click" 
</code></pre></li>
<li><p> 这时候出现了一些重复列了，这也就是我们要做group by的数据。</p>

<pre><code>uniq -c | awk {'print $2, $3, $1'} 
</code></pre></li>
</ol>


<p>  后面awk只是调了一下位置。合并起来就是：</p>

<pre><code>sort -k 1  test.txt|awk '{print $1, $2, $3}' |grep "Click"|uniq -c | awk {'print $2, $3, $1'} 
</code></pre>

<p>  输出结果：</p>

<pre><code>AAAAAAAAAAA tag1 2
AAAAAAAAAAA tag2 1
BBBBBBBBBBB tag2 2
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[sort多列排序]]></title>
    <link href="http://cxh.me/2015/01/22/sort-using-multiple-columns/"/>
    <updated>2015-01-22T13:38:00+08:00</updated>
    <id>http://cxh.me/2015/01/22/sort-using-multiple-columns</id>
    <content type="html"><![CDATA[<p>  遇到这样一个需求，希望按照第二列排序，第二列相同的情况下按照第一列排序，数据如下：</p>

<pre><code>b   2   c
c   2   b
a   1   b
</code></pre>

<p>  习惯性的用:</p>

<pre><code>sort -k 2 -k 1 input.txt
</code></pre>

<p>  输出结果是：</p>

<pre><code>a   1   b
c   2   b
b   2   c
</code></pre>

<p>  可以看到实际上先按照第二列排序，第二列相同按照第三列排序了。问题在于sort -k默认是按照顺序排序到末尾的。如果要打破默认，需要指定从哪个列到哪个列。</p>

<pre><code>sort -k 2，2 -k 1 input.txt
</code></pre>

<p>  换个角度说，<code>sort -k 1 -k 2</code> 的效果跟 <code>sort -k 1</code> 是一样的。所以最好还是让数据按照排序列生成，这样看起来也最直观。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[通过搭建代理来共享网络]]></title>
    <link href="http://cxh.me/2015/01/11/linux-proxy-setup/"/>
    <updated>2015-01-11T17:16:00+08:00</updated>
    <id>http://cxh.me/2015/01/11/linux-proxy-setup</id>
    <content type="html"><![CDATA[<p>   遇到这样一个问题，开发机只有一台能上外网，其他的机器上手动更新依赖包简直是要死的感觉。尝试了如下几种方式：</p>

<ol>
<li>. vpn

<ol>
<li><a href="http://5323197.blog.51cto.com/5313197/1285738" title=" centos6.4 安装配置 pptp vpn">pptp</a></li>
<li><a href="https://www.digitalocean.com/community/tutorials/how-to-setup-and-configure-an-openvpn-server-on-centos-6" title="How to Setup and Configure an OpenVPN Server on CentOS 6 | DigitalOcean">openvpn</a></li>
</ol>
</li>
<li>. ssh反向代理（其实不是干这个事情的貌似）</li>
<li>. proxy</li>
</ol>


<p>   开始一直不想用proxy，毕竟需要为yum什么的单独配置，不是所有的程序都会去读shell的http_proxy配置。但是vpn配置搞了一天都不成功。openvpn能连接，但是不能共享网络，大概是路由配错了，pptp linux下直接链接不上，可能是只用了chap的握手？反正没成功。最后还是配了proxy，配完才觉得proxy简单易行啊，大部分问题能解决，出现了特别的需求就单独为其设置代理好了。问题不大。</p>

<p>   tinyproxy的配置如下：</p>

<pre><code>yum install tinyproxy

# vi /etc/tinyproxy/tinyproxy.conf
Allow 192.168.1.0/24 # 限制可以使用Proxy的来源网段

service tinyproxy start

shell配置：
export http_proxy='xxx:8888'
export https_proxy='xxx:8888'

yum配置：
vi /etc/yum.conf
  proxy=http://xxxx:8888
ConnectPort 443     
</code></pre>

<p>  配置难度真不是一个数量级的，可见有时候能满足大部分情况，就是最好的解决方案了。</p>

<p>  <strong>补充：easy_install和pip是默认读取http_proxy的，但是一直不能连接。尝试了很久之后发现是sudo的问题，sudo环境没有执行.bashrc，所以root的http_proxy和当前用户的http_proxy都没有生效。su到root下就可以了。</strong></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Linux上的远程log监控]]></title>
    <link href="http://cxh.me/2015/01/04/linux-remote-log-watch/"/>
    <updated>2015-01-04T17:34:00+08:00</updated>
    <id>http://cxh.me/2015/01/04/linux-remote-log-watch</id>
    <content type="html"><![CDATA[<p>  名字太大，其实只是遇到了一个问题，想远程实时看一个log文件的变化。开始是这么做的。</p>

<pre><code>vim 里面 :e scp://xxx@xxx//filePath
:e! 来刷新
</code></pre>

<p>   太low了。直接用ssh：</p>

<pre><code>ssh xx@xxx "less filePath"
</code></pre>

<p>   发现less直接就退出了。 换成:</p>

<pre><code>ssh -t xx@xxx "less filePath"
</code></pre>

<p>   也不能实时刷新。测试less 本地一个文件同时写入，发现less没有实时刷新的功能。看来是在ob的时候deploy给我的错觉啊。</p>

<p>   换tail:</p>

<pre><code>ssh -t xx@xxx "tail filePath"
</code></pre>

<p>   还是直接执行完毕退出。查tail有没有自动刷新的模式，有一个follow：</p>

<pre><code>ssh xx@xx "tail -f filePath"
</code></pre>

<p>   搞定。<em>配合[TMux]绝对好用</em>。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[du显示只显示一层子目录/文件的大小]]></title>
    <link href="http://cxh.me/2014/11/13/du-to-display-one-level/"/>
    <updated>2014-11-13T17:55:00+08:00</updated>
    <id>http://cxh.me/2014/11/13/du-to-display-one-level</id>
    <content type="html"><![CDATA[<p>  经常需要看当前目录下的子目录大小，比如开发机被人占满的情况，<code>du -lh</code>显示的是递归的所有文件大小，<code>du -s</code>又只统计了所有文件/文件夹合起来的大小。正常情况下需要执行：</p>

<pre><code>du -lh --max-depth=1
</code></pre>

<p>  未免太过麻烦。后来肖总提示发现这样就行了：</p>

<pre><code>du -sh *
</code></pre>

<p>  果然是学无止境啊</p>
]]></content>
  </entry>
  
</feed>
