<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: C++ | CXH.ME]]></title>
  <link href="http://cxh.me/category/c-plus-plus/atom.xml" rel="self"/>
  <link href="http://cxh.me/"/>
  <updated>2014-07-22T17:31:40+08:00</updated>
  <id>http://cxh.me/</id>
  <author>
    <name><![CDATA[Harry Chen]]></name>
    <email><![CDATA[sdqxcxh@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[c/c++的不定参数]]></title>
    <link href="http://cxh.me/2014/07/17/c-variable-argument/"/>
    <updated>2014-07-17T14:42:00+08:00</updated>
    <id>http://cxh.me/2014/07/17/c-variable-argument</id>
    <content type="html"><![CDATA[<p>  c/c++可以通过va_arg等宏实现不定参数。一个例子如下(c++)：</p>

<pre><code>void ar_cnt(int cnt,...);
int main(int argc, char* argv[])
{
    ar_cnt(4,1,2,3,4);
    return 0; 
}
void ar_cnt(int cnt,...)
{
    int arg_cnt = cnt;
    va_list arg_ptr;
    va_start(arg_ptr, cnt);
    for(int i=0; i &lt; cnt;i++)
    {
        int value=va_arg(arg_ptr,int);
        printf("posation %d=%d\n", value, i+1);
    }
    va_end(arg_ptr);
}
</code></pre>

<p>  其实原理是比较简单的，依赖于编译器对函数调用的压栈顺序，但是目测现有的调用方式压栈都是从右向左，所以va_start定位第一个参数的位置，va_arg每次在之前的位置上加一个偏移值，从而得到每个传入参数。这就是说va_start要求传入不定参数的函数不能只传入一个&hellip;，至少要有一个固定的参数，用来获取栈指针位置。</p>

<!--more-->


<p>  调用方式这个东西好像只有在VC里才探讨，不太清楚gcc这里的处理是怎么样的，vc下主要分了如下几种：</p>

<ul>
<li><p>STDCALL/PASCAL/WINAPI/CALLBACK</p>

<ol>
<li>参数从右向左压入堆栈</li>
<li>函数自身修改堆栈</li>
<li>函数名自动加前导的下划线，后面紧跟一个@符号，其后紧跟着参数的尺寸</li>
</ol>
</li>
<li><p>CDECL</p>

<ol>
<li>调用约定的参数压栈顺序是和stdcall是一样的，参数由右向左压入堆栈。</li>
<li>调用者负责清理堆栈。</li>
<li>由于这种变化，C调用约定允许函数的参数的个数是不固定的，这也是C语言的一大特色。</li>
</ol>
</li>
<li><p>FASTCALL</p>

<ol>
<li>函数的第一个和第二个DWORD参数（或者尺寸更小的）通过ecx和edx传递，其他参数通过从右向左的顺序压栈</li>
<li>被调用函数清理堆栈</li>
<li>函数名修改规则同stdcall</li>
</ol>
</li>
<li><p>THISCALL</p>

<ol>
<li>参数从右向左入栈</li>
<li>如果参数个数确定，this指针通过ecx传递给被调用者；如果参数个数不确定，this指针在所有参数压栈后被压入堆栈</li>
</ol>
</li>
<li><p>NAKEDCALL</p>

<ol>
<li>这是一个很少见的调用约定，一般程序设计者建议不要使用。</li>
<li>编译器不会给这种函数增加初始化和清理代码，更特殊的是，你不能用return返回返回值，只能用插入汇编返回结果</li>
<li>这一般用于实模式驱动程序设计</li>
</ol>
</li>
</ul>


<h3>参考文献:</h3>

<blockquote><p>[1] cdecl、stdcall、fastcall函数调用约定区别 , <a href="http://blog.csdn.net/fly2k5/article/details/544112">http://blog.csdn.net/fly2k5/article/details/544112</a></p>

<p>[2] 函数调用的区别：<em>cdecl以及</em>stdcall, <a href="http://www.cppblog.com/kenny/archive/2011/04/19/144539.html">http://www.cppblog.com/kenny/archive/2011/04/19/144539.html</a></p>

<p>[3] 透析C语言可变参数问题, <a href="http://www.cnblogs.com/wangyonghui/archive/2010/07/12/1776068.html">http://www.cnblogs.com/wangyonghui/archive/2010/07/12/1776068.html</a></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[java/c++变量作用域的一点小区别]]></title>
    <link href="http://cxh.me/2014/07/17/java-c-plus-plus-variable-scope-diff/"/>
    <updated>2014-07-17T11:16:00+08:00</updated>
    <id>http://cxh.me/2014/07/17/java-c-plus-plus-variable-scope-diff</id>
    <content type="html"><![CDATA[<p>  偶然遇到一个问题，java里面这么写是有问题的</p>

<pre><code>int x = 1;
    {
        int x = 2;
    }
</code></pre>

<p>  作为一个写了多年C++的人，不能忍啊。java子域里的变量看样子不会覆盖父域。但是这样是没问题的，可见子域的生命周期还是局限于子域里面。</p>

<pre><code>    {
        int x = 2;
    }
int x = 1;
</code></pre>

<p>  C++里面这样是没问题的</p>

<pre><code>  int x = 1 ;
  {
    int x  = 2;
  }
</code></pre>

<p>  相对于脚本语言，这种限制似乎就宽多了。这样都可以。</p>

<pre><code>for i in range(1,10):
    pass
print i
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[命名空间和友元冲突]]></title>
    <link href="http://cxh.me/2014/07/10/namespace-conflicts-with-friend/"/>
    <updated>2014-07-10T19:09:00+08:00</updated>
    <id>http://cxh.me/2014/07/10/namespace-conflicts-with-friend</id>
    <content type="html"><![CDATA[<p>  今天遇到一个问题，需要跨namespace定义友元，这种情况比较常见的是测试类需要访问源码类，gtest据说有个FRIEND_TEST宏，以前用过好像有问题。这里我们直接用友元:</p>

<pre><code>namespace oceanbase
{
    namespace election
    {
        class ObElectionServer : public ObSingleServer
        {
            friend class ObElectionTester;
            ...
        }
    }
}
namespace oceanbase
{
  namespace tests
  {
    namespace election
    {
        class ObElectionTester : public ObElectionServer
        {
            ...
        }
    }
}
</code></pre>

<p>  这样是肯定不行的，这等于告诉ObElectionServer在自己的namespace下找ObElectionTester。改成如下：</p>

<!--more-->


<pre><code>namespace oceanbase
{
    namespace election
    {
        class ObElectionServer : public ObSingleServer
        {
            friend class oceanbase::tests::election::ObElectionTester;
            ...
        }
    }
}
</code></pre>

<p>  这样也不行，ObElectionServer不知道ObElectionTester是个包含namespace的类名。所以我们需要前向声明一下类。</p>

<pre><code>namespace oceanbase
{
  namespace tests
  {
    namespace election
    {
      class ObElectionTester;
    }
  }
  namespace election
  {
    class ObElectionServer : public ObSingleServer
    {
        friend class oceanbase::tests::election::ObElectionTester;
        ....
    }
  }
}
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于备份文件管理]]></title>
    <link href="http://cxh.me/2014/07/04/backup-file-management/"/>
    <updated>2014-07-04T11:20:00+08:00</updated>
    <id>http://cxh.me/2014/07/04/backup-file-management</id>
    <content type="html"><![CDATA[<p>  最近在写一个备份的工作，备份线程每次会把需要备份的数据写到文件，同时需要保存一定数量的旧文件。</p>

<p>  首先为了写失败的时候不会损坏之前的旧备份文件，我们需要写一个临时文件然后覆盖回去。同时，为了保存旧文件，需要每次写一个不同的文件，同时维护一个当前的最新文件，然后删除超过了一定期限的文件，假定临时文件名是file.bin.2014xxxx，最新文件名是file.bin，有如下三个方法：</p>

<ol>
<li> 每次写临时文件，同时写一个内容一样的file.bin。造成空间浪费。</li>
<li> 每次写临时文件，同时更新软链接file.bin。不兼容非linux系统。</li>
<li> 写manifest，文件内容是当前最新文件名。比较麻烦。</li>
</ol>


<p>  最后还是按2方案实现的，代码如下：</p>

<!--more-->


<pre><code>int overwrite_tmp_file(const char * filename, const int64_t version)
{
  char tmp_path[OB_MAX_FILE_NAME_LENGTH] ={'\0'};
  int ret = OB_SUCCESS;
  if (filename == NULL)
  {
    ret = OB_INVALID_ARGUMENT;
  }
  else
  {
    char time_str[OB_MAX_TIME_STR_LENGTH] = {'\0'};
    tbsys::CTimeUtil::timeToStr(ObTimeUtility::extract_second(version), time_str);
    int len = snprintf(tmp_path, sizeof(tmp_path), "%s.%s", filename, time_str);
    if (0 &gt; len || len &gt;= static_cast&lt;int32_t&gt;(sizeof(tmp_path)))
    {
      ret = OB_ERR_UNEXPECTED;
      TBSYS_LOG(WARN, "No file name specified!");
    }
    else
    {
      struct stat buf;
      if (0 == lstat(filename, &amp;buf))
      {
        if (0 != ::unlink(filename))
        {
          TBSYS_LOG(WARN, "fail to remove old file, msg: [%s]", strerror(errno));
          ret = OB_ERR_SYS;
        }
      }
      if (OB_SUCCESS == ret)
      {
        if (0 != ::symlink(basename(tmp_path), filename))
        {
          TBSYS_LOG(WARN, "fail to link backup file, msg: [%s]", strerror(errno));
          ret = OB_ERR_SYS;
        }
        else if (OB_SUCCESS != clean_old_files(filename))//do not need to return error
        {
          TBSYS_LOG(WARN, "failed to remove old files");
        }
      }
    }
  }
  return ret;
}


const static int64_t KEEP_FILE_RANGE = 3600 * 24 * 7;//7d,unit:s

int clean_old_files(const char * filename)
{
  int ret = OB_SUCCESS;
  if (filename == NULL)
  {
    ret = OB_INVALID_ARGUMENT;
  }
  else
  {
    char tmp_path[OB_MAX_FILE_NAME_LENGTH] ={'\0'};
    glob_t globbuf;
    globbuf.gl_offs = 0;
    int len = snprintf(tmp_path, sizeof(tmp_path), "%s.*", filename);
    if (len &lt; 0 || len &gt;= static_cast&lt;int32_t&gt;(sizeof(tmp_path)))
    {
      ret = OB_ERR_UNEXPECTED;
    }
    else if (0 != glob(tmp_path, GLOB_DOOFFS, NULL, &amp;globbuf))
    {
      ret = OB_ERR_SYS;
    }
    else
    {
      int64_t cur_time = ObTimeUtility::extract_second(tbsys::CTimeUtil::getTime());
      for(unsigned int i = 0; i &lt; globbuf.gl_pathc; ++i)
      {
        int64_t version = tbsys::CTimeUtil::strToTime(globbuf.gl_pathv[i] + strlen(filename) + 1);
        if (cur_time - version &gt; KEEP_FILE_RANGE)
        {
          //delete file
          if (0 != unlink(globbuf.gl_pathv[i]))
          {
            TBSYS_LOG(WARN, "fail to remove old file, msg: [%s]", strerror(errno));
          }
        }
      }
    }
    globfree(&amp;globbuf);
  }
  return ret;
}
</code></pre>

<p>  需要注意的大概只有软连接文件属性获取是lstat而不是stat。另外，由于子文件夹的存在，建立软链接的symlink参数需要指定相对路径，也就是说，如果我们要让etc目录下的file.bin指向file.bin.2014xxxx，需要：</p>

<pre><code>ln -s file.bin etc/file.bin.2014xxx
</code></pre>

<p>  而不是</p>

<pre><code>ln -s etc/file.bin etc/file.bin.2014xxx  
</code></pre>

<p>  上面会导致链接文件指向etc/etc/file.bin.2014xxx而失效。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NVI的应用-虚函数模板]]></title>
    <link href="http://cxh.me/2014/07/01/nvi-usage-of-virtual-template/"/>
    <updated>2014-07-01T14:52:00+08:00</updated>
    <id>http://cxh.me/2014/07/01/nvi-usage-of-virtual-template</id>
    <content type="html"><![CDATA[<p>  我们有时候需要把一个模板函数实现为虚函数，但是C++不支持模板虚函数（至少目前是），所以需要一些方法绕过去。以下是郁白师兄提供的解决方案，确实比较巧妙，之前没想过NVI（NonVirtual Interface）能解决这个问题。</p>

<pre><code>class IAllocator
{
  public:
    virtual ~IAllocator() {};
    virtual void *alloc(const int64_t size) = 0;
};
template &lt;class T&gt;
class TAllocator : public IAllocator
{
  public:
    TAllocator(T &amp;allocator) : allocator_(allocator) {};
    void *alloc(const int64_t size) {return allocator_.alloc(size);};
  private:
    T &amp;allocator_;
};

class Base
{
  public:
    virtual ~Base() {};
  public:
    template &lt;class Allocator&gt;
    void get_number(Allocator &amp;allocator)
    {
      TAllocator&lt;Allocator&gt; ta(allocator);
      this-&gt;get_number_(ta);
    };
  private:
    virtual void get_number_(IAllocator &amp;allocator) = 0;
};

class Sub1 : public Base
{
  private:
    void get_number_(IAllocator &amp;allocator)
    {
      allocator.alloc(1);
      fprintf(stdout, "sub1::get_number_ invoked\n");
    };
};

class Sub2 : public Base
{
  private:
    void get_number_(IAllocator &amp;allocator)
    {
      allocator.alloc(1);
      fprintf(stdout, "sub2::get_number_ invoked\n");
    };
};

class PA
{
  public:
    void *alloc(const int64_t sz)
    {
      fprintf(stdout, "pa::alloc sz=%ld\n", sz);
      return NULL;
    };
};

int main()
{
  Sub1 s1;
  Sub2 s2;
  PA pa;

  s1.get_number(pa);
  s2.get_number(pa);
}
</code></pre>

<p>  主要思想是把模板特化，特化之后的函数实现虚函数，把模板遵循的规则转化到继承体系，让一个实例化的模板参数遵循Interface的接口要求。所以TAllocator这个Wrapper至关重要。</p>

<h3>参考文献:</h3>

<blockquote><p>[1] 【C++程序设计技巧】NVI（Non-Virtual Interface ）, <a href="http://www.cnblogs.com/gnuhpc/archive/2012/01/17/2324836.html">http://www.cnblogs.com/gnuhpc/archive/2012/01/17/2324836.html</a></p>

<p>[2] 纯虚函数能为private吗？, <a href="http://www.cppblog.com/zhuweisky/archive/2005/09/14/269.html">http://www.cppblog.com/zhuweisky/archive/2005/09/14/269.html</a></p></blockquote>
]]></content>
  </entry>
  
</feed>
